<?xml version="1.0" encoding="Windows-1252" ?>
<?xml-stylesheet type="text/xsl" href="file:///C:\Program Files (x86)\MZTools3VBA\sample.xsl" ?>
<Project>
<Name>AutofocusScreen_ZEN</Name>
<FileName>AutofocusScreen_ZEN.lvb</FileName>
<PathFileName>C:\Users\Antonio Politi\Code\AutomatedMicroscopy\AutofocusScreenv3.1dev\AutofocusScreen_ZEN.lvb</PathFileName>
<BuildFileName>AutofocusScreen_ZEN.DLL</BuildFileName>
<BuildPathFileName>C:\Users\Antonio Politi\Code\AutomatedMicroscopy\AutofocusScreenv3.1dev\AutofocusScreen_ZEN.DLL</BuildPathFileName>
<Description>Macro for autofocus on Zeiss microscopes running ZEN</Description>
<HelpContextID>0</HelpContextID>
<HelpFile></HelpFile>
<Type>Host Project</Type>
<References>
<Reference>
<Name>VBA</Name>
<FileName>vbe6.dll</FileName>
<PathFileName>c:\program files (x86)\common files\microsoft shared\vba\vba6\vbe6.dll</PathFileName>
<Description>Visual Basic For Applications</Description>
<BuiltIn>True</BuiltIn>
<Guid>{000204EF-0000-0000-C000-000000000046}</Guid>
<Major>4</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Lsm5Vba</Name>
<FileName>lsm5vb~1.dll</FileName>
<PathFileName>c:\zen\lsm5vb~1.dll</PathFileName>
<Description></Description>
<BuiltIn>True</BuiltIn>
<Guid>{B6D10263-90EF-4AD5-A048-AE4BDB587FA8}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>stdole</Name>
<FileName>stdole2.tlb</FileName>
<PathFileName>c:\windows\syswow64\stdole2.tlb</PathFileName>
<Description>OLE Automation</Description>
<BuiltIn>False</BuiltIn>
<Guid>{00020430-0000-0000-C000-000000000046}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MSForms</Name>
<FileName>fm20.dll</FileName>
<PathFileName>c:\windows\system32\fm20.dll</PathFileName>
<Description>Microsoft Forms 2.0 Object Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{0D452EE1-E08F-101A-852E-02608C4D0BB4}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimAcquisitionController40</Name>
<FileName>aimacq~1.dll</FileName>
<PathFileName>c:\zen\aimacq~1.dll</PathFileName>
<Description>AimAcquisitionController 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{9E2D9FF7-ADE8-4EFA-8642-CB74DFD610E6}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimCommonTools40</Name>
<FileName>aimcom~1.dll</FileName>
<PathFileName>c:\zen\aimcom~1.dll</PathFileName>
<Description>AimCommonTools 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{8AA54F74-E1EC-4D51-B86B-4725E56B1566}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimImage40</Name>
<FileName>aimima~1.dll</FileName>
<PathFileName>c:\zen\aimima~1.dll</PathFileName>
<Description>AimImage 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{13A20796-C36E-4A6D-9A0B-D3E8E5175328}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimImageImportExport40</Name>
<FileName>aimimp~1.dll</FileName>
<PathFileName>c:\zen\aimimp~1.dll</PathFileName>
<Description>AimImageImportExport 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{E303A432-7FEA-4615-975D-49D52C4C32A2}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimImageProcessing40</Name>
<FileName>aic696~1.dll</FileName>
<PathFileName>c:\zen\aic696~1.dll</PathFileName>
<Description>AimImageProcessing 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{42016C3F-2359-4B9E-A033-DF9A19CFC869}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>CP</Name>
<FileName>cp5032.dll</FileName>
<PathFileName>c:\zen\cp5032.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{8D9F155E-AA3E-4FF4-86D0-11631D41860D}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>DS45</Name>
<FileName>ds.dll</FileName>
<PathFileName>c:\zen\ds.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{E867D17D-F87A-4BF2-857D-558FBC7D49F8}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>LSMVECTORMATHLib</Name>
<FileName>lsmvec~2.dll</FileName>
<PathFileName>c:\zen\lsmvec~2.dll</PathFileName>
<Description>LsmVectorMath 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{C94B3DA8-A345-4F08-BC2F-51A283DC41A1}</Guid>
<Major>3</Major>
<Minor>2</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Scripting</Name>
<FileName>scrrun.dll</FileName>
<PathFileName>c:\windows\syswow64\scrrun.dll</PathFileName>
<Description>Microsoft Scripting Runtime</Description>
<BuiltIn>False</BuiltIn>
<Guid>{420B2830-E718-11CF-893D-00A0C9054228}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>RichTextLib</Name>
<FileName>richtx32.ocx</FileName>
<PathFileName>c:\windows\syswow64\richtx32.ocx</PathFileName>
<Description>Microsoft Rich Textbox Control 6.0 (SP4)</Description>
<BuiltIn>False</BuiltIn>
<Guid>{3B7C8863-D78F-101B-B9B5-04021C009402}</Guid>
<Major>1</Major>
<Minor>2</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MSComDlg</Name>
<FileName>comdlg32.ocx</FileName>
<PathFileName>c:\windows\syswow64\comdlg32.ocx</PathFileName>
<Description>Microsoft Common Dialog Control 6.0 (SP3)</Description>
<BuiltIn>False</BuiltIn>
<Guid>{F9043C88-F6F2-101A-A3C9-08002B2F49FB}</Guid>
<Major>1</Major>
<Minor>2</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>VBScript_RegExp_55</Name>
<FileName>vbscript.dll\3</FileName>
<PathFileName>c:\windows\system32\vbscript.dll\3</PathFileName>
<Description>Microsoft VBScript Regular Expressions 5.5</Description>
<BuiltIn>False</BuiltIn>
<Guid>{3F4DACA7-160D-11D2-A8E9-00104B365C9F}</Guid>
<Major>5</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Shell32</Name>
<FileName>shell32.dll</FileName>
<PathFileName>c:\windows\syswow64\shell32.dll</PathFileName>
<Description>Microsoft Shell Controls And Automation</Description>
<BuiltIn>False</BuiltIn>
<Guid>{50A7E9B0-70EF-11D1-B75A-00A0C90564FE}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimExperiment40</Name>
<FileName>aimexp~1.dll</FileName>
<PathFileName>c:\zen\aimexp~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{99FB8CE8-387A-437F-B4D8-1B4FFBF3A196}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimFcsController40</Name>
<FileName>aimfcs~1.dll</FileName>
<PathFileName>c:\zen\aimfcs~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{6C0B58A4-D8F9-4173-B07C-F41AE7F6432E}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimFcsData40</Name>
<FileName>aimfcs~3.dll</FileName>
<PathFileName>c:\zen\aimfcs~3.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{4F9E90CA-2366-4DBE-8AAA-6071EAF443D0}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimFcsFile40</Name>
<FileName>ai805e~1.dll</FileName>
<PathFileName>c:\zen\ai805e~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{EEED9502-B222-4118-80E6-73FDE9919540}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimFcsProcessing40</Name>
<FileName>aic7ea~1.dll</FileName>
<PathFileName>c:\zen\aic7ea~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{8328F42F-0A72-4145-A9B4-34BA006196FB}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimViewerGuiServer40</Name>
<FileName>aimvie~1.dll</FileName>
<PathFileName>c:\zen\aimvie~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{7E59F208-9584-4609-8108-1B6DCC4CB40E}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimImageViewer40</Name>
<FileName>ai16e6~1.dll</FileName>
<PathFileName>c:\zen\ai16e6~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{D4135BDF-BD96-4F3E-AA71-22D91F70269B}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimVectorOverlay40</Name>
<FileName>aimvec~1.dll</FileName>
<PathFileName>c:\zen\aimvec~1.dll</PathFileName>
<Description>AimVectorOverlay 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{C73D0443-5899-4ADA-80A5-7A52D15C93CD}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>IWshRuntimeLibrary</Name>
<FileName>wshom.ocx</FileName>
<PathFileName>c:\windows\syswow64\wshom.ocx</PathFileName>
<Description>Windows Script Host Object Model</Description>
<BuiltIn>False</BuiltIn>
<Guid>{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Zeiss_Micro_AIM_ApplicationInterface</Name>
<FileName>zeiss.micro.aim.applicationinterface.tlb</FileName>
<PathFileName>c:\zen\zeiss.micro.aim.applicationinterface.tlb</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{E06744D0-8A82-11DF-A4EE-0800200C9A66}</Guid>
<Major>8</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>mscorlib</Name>
<FileName>mscorlib.tlb</FileName>
<PathFileName>c:\windows\microsoft.net\framework\v4.0.30319\mscorlib.tlb</PathFileName>
<Description>mscorlib.dll</Description>
<BuiltIn>False</BuiltIn>
<Guid>{BED7F4EA-1A96-11D2-8F08-00A0C9A6186D}</Guid>
<Major>2</Major>
<Minor>4</Minor>
<Type>TypeLib</Type>
</Reference>
</References>
<Files>
<File>
<Name>LsmVbaDocFile</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>VBADocument</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>LsmVbaDocFile</Value>
</Property>
<Property>
<Name>Version</Name>
<Value>3</Value>
</Property>
<Property>
<Name>Author</Name>
<Value>zjmei</Value>
</Property>
<Property>
<Name>Revision</Name>
<Value>14366</Value>
</Property>
<Property>
<Name>Created</Name>
<Value>13.05.2009 09:14:02</Value>
</Property>
<Property>
<Name>Modified</Name>
<Value>29/08/2013 14:49:05</Value>
</Property>
<Property>
<Name>ModifiedAuthor</Name>
<Value>Antonio Politi</Value>
</Property>
<Property>
<Name>DongleKey</Name>
<Value></Value>
</Property>
<Property>
<Name>EditDongleKey</Name>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Lsm5VbaDoc_SystemEvent</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Lsm5VbaDoc_SystemEvent(ByVal EventNr As Long, ByVal Param As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>EventNr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Param</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Functions</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Functions</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>192</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Autofocus_Setup</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub Autofocus_Setup()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DisplayProgress</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Display progress in bottom labal of AutofocusForm</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub DisplayProgress(State As String, Color As Long)</Declaration>
<Parameters>
<Parameter>
<Name>State</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Color</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>weightedMean</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> compute a weighted mean of the positiions of an array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function weightedMean(values() As Variant) As Double</Declaration>
<Parameters>
<Parameter>
<Name>values()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>MIN</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Calculate MIN of two values</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MIN(value1 As Variant, value2 As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>value1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>Max</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Calculate MIN of two values</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Max(value1 As Variant, value2 As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>value1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>MINA</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Calculate MIN of Array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MINA(values() As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>values()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>MAXA</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Calculate MIN of Array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MAXA(values() As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>values()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>isArrayEmpty</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>  isArrayEmpty(parArray As Variant) As Boolean</CommentLine>
<CommentLine>  Returns false if not an array or dynamic array that has not been initialised (ReDim) or has been erased (Erase)</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function isArrayEmpty(parArray As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>parArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>InCollection</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Check if key is in collection</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function InCollection(Col As Collection, Key As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Col</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Key</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>FServerFromDescription</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   FServerFromDescription(strName As String, StrPath As String, ExecName As String) As Boolean</CommentLine>
<CommentLine>   TODO: What is this?</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Function FServerFromDescription(strName As String, StrPath As String, ExecName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>strName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>StrPath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ExecName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Some utility functions</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>MCUCommands</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>MCUCommands</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>13</CountOfDeclarationLines>
<CountOfLines>314</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>InitializeStageProperties</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub InitializeStageProperties(Optional Tmp As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Tmp</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetStagePositionX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetStagePositionX(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>GetStagePositionY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetStagePositionY(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>SetStagePositionX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SetStagePositionX(PositionMicrons As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>PositionMicrons</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetStagePositionY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SetStagePositionY(PositionMicrons As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>PositionMicrons</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetStageSpeed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SetStageSpeed(StageSpeed As Double, CANN As Boolean) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>StageSpeed</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SetStageAcceleration</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>-----------------------------------------------------------------------------</CommentLine>
<CommentLine>-----------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub SetStageAcceleration(Accelearation As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Accelearation</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetStageAcceleration</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetStageAcceleration(CANN As Boolean) As Long</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetStageSpeed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetStageSpeed(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>IsStageBusy</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsStageBusy(CANN As Boolean) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetMaximumStageSpeed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetMaximumStageSpeed() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>GetMinimumStageSpeed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetMinimumStageSpeed() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>StageMoveToPositionX</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function StageMoveToPositionX(PositionMetre As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>PositionMetre</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StageMoveToPositionY</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function StageMoveToPositionY(PositionMetre As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>PositionMetre</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StageGetPositionX</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function StageGetPositionX(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>StageGetPositionY</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function StageGetPositionY(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>SendStageCommand</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub SendStageCommand(command As String)</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SendStageCommandWaitForAnswer</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendStageCommandWaitForAnswer(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SendStageCommandWaitForHexAnswer</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendStageCommandWaitForHexAnswer(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SendCommand</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendCommand(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SendCommandWaitForAnswer</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendCommandWaitForAnswer(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SendCommandWaitForHexAnswer</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendCommandWaitForHexAnswer(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>NoImageAxisChange</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Function is not used</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub NoImageAxisChange(Optional Tmp As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Tmp</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ImageAxisChange</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Function is not used</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub ImageAxisChange(Optional Tmp As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Tmp</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StageSettings</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   AreStageCoordinateExchanged() As Boolean</CommentLine>
<CommentLine>       Check whether X and Y axis are exchanged and return True if yes.</CommentLine>
<CommentLine>       Todo: Could also return whether axis are mirrored. Intrestingly althouh axes are not mirrored we use -X??</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub StageSettings(MirrorX As Boolean, MirrorY As Boolean, ExchangeXY As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>MirrorX</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>MirrorY</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ExchangeXY</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Module with functions to control the stage</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>AutofocusForm</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Name>ActiveControl</Name>
<Value></Value>
</Property>
<Property>
<Name>BackColor</Name>
<Value>-2147483645</Value>
</Property>
<Property>
<Name>BorderColor</Name>
<Value>-2147483630</Value>
</Property>
<Property>
<Name>BorderStyle</Name>
<Value>0</Value>
</Property>
<Property>
<Name>CanPaste</Name>
<Value>False</Value>
</Property>
<Property>
<Name>CanRedo</Name>
<Value>False</Value>
</Property>
<Property>
<Name>CanUndo</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Cycle</Name>
<Value>0</Value>
</Property>
<Property>
<Name>_Font_Reserved</Name>
<Value></Value>
</Property>
<Property>
<Name>ForeColor</Name>
<Value>8421504</Value>
</Property>
<Property>
<Name>InsideHeight</Name>
<Value>676.5</Value>
</Property>
<Property>
<Name>InsideWidth</Name>
<Value>360</Value>
</Property>
<Property>
<Name>KeepScrollBarsVisible</Name>
<Value>3</Value>
</Property>
<Property>
<Name>MousePointer</Name>
<Value>0</Value>
</Property>
<Property>
<Name>PictureAlignment</Name>
<Value>2</Value>
</Property>
<Property>
<Name>Picture</Name>
<Value></Value>
</Property>
<Property>
<Name>PictureSizeMode</Name>
<Value>0</Value>
</Property>
<Property>
<Name>PictureTiling</Name>
<Value>True</Value>
</Property>
<Property>
<Name>ScrollBars</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollHeight</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollLeft</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollTop</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollWidth</Name>
<Value>0</Value>
</Property>
<Property>
<Name>SpecialEffect</Name>
<Value>0</Value>
</Property>
<Property>
<Name>VerticalScrollBarSide</Name>
<Value>0</Value>
</Property>
<Property>
<Name>Zoom</Name>
<Value>100</Value>
</Property>
<Property>
<Name>DesignMode</Name>
<Value>-2</Value>
</Property>
<Property>
<Name>ShowToolbox</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ShowGridDots</Name>
<Value>-2</Value>
</Property>
<Property>
<Name>SnapToGrid</Name>
<Value>-2</Value>
</Property>
<Property>
<Name>GridX</Name>
<Value>0</Value>
</Property>
<Property>
<Name>GridY</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DrawBuffer</Name>
<Value>32000</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>AutofocusForm</Value>
</Property>
<Property>
<Name>Caption</Name>
<Value>AutofocusScreen</Value>
</Property>
<Property>
<Name>Left</Name>
<Value>0</Value>
</Property>
<Property>
<Name>Top</Name>
<Value>-2.25</Value>
</Property>
<Property>
<Name>Width</Name>
<Value>364.5</Value>
</Property>
<Property>
<Name>Height</Name>
<Value>697.5</Value>
</Property>
<Property>
<Name>Enabled</Name>
<Value>True</Value>
</Property>
<Property>
<Name>Tag</Name>
<Value></Value>
</Property>
<Property>
<Name>HelpContextID</Name>
<Value>0</Value>
</Property>
<Property>
<Name>WhatsThisButton</Name>
<Value>False</Value>
</Property>
<Property>
<Name>WhatsThisHelp</Name>
<Value>False</Value>
</Property>
<Property>
<Name>RightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>StartUpPosition</Name>
<Value>3</Value>
</Property>
<Property>
<Name>ShowModal</Name>
<Value>False</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>27</CountOfDeclarationLines>
<CountOfLines>2732</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>ShowOiaKeys_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub ShowOiaKeys_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>MultiPage1_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>&apos;commodity function to recognize which job is ob top</CommentLine>
</CommentLines>
<Declaration>Private Sub MultiPage1_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UserForm_Initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>98</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> UserForm_Initialize()</CommentLine>
<CommentLine>   Function called from e.g. AutoFocusForm.Show</CommentLine>
<CommentLine>   Load and initialize form</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub UserForm_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Re_Start</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>120</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Re_Start()</CommentLine>
<CommentLine> Initializations that need to be performed only at the first start of the Macro</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub Re_Start()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Re_Initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>61</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Re_Initialize()</CommentLine>
<CommentLine>   Initializations that need to be performed only when clicking the &quot;Reinitialize&quot; button</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub Re_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ButtonSaveSettings_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ButtonSaveSettings_Click()</CommentLine>
<CommentLine>   Open a dialog to save setting of the macro</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub ButtonSaveSettings_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ButtonLoadSettings_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ButtonSaveSettings_Click()</CommentLine>
<CommentLine>   Open a dialog to save setting of the macro</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub ButtonLoadSettings_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>MultipleLocationToggle_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   MultipleLocationToggle_Change()</CommentLine>
<CommentLine>   Activate MultipleLocation and deactivate SingleLocation</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub MultipleLocationToggle_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SingleLocationToggle_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   SingleLocationToggle_Change()</CommentLine>
<CommentLine>   Activate Singlelocation and deactivate MultipleLocation</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub SingleLocationToggle_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FocusMap_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   FocusMap_Click()</CommentLine>
<CommentLine>   create a focusMap using teh Autofocus Channel</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub FocusMap_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SwitchEnablePage</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>68</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Enable/disable a general set of functions common to all pages</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub SwitchEnablePage(JobName As String, Enable As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Enable</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SwitchEnableFcsPage</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Enable/disable a general set of functions common to all pages</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub SwitchEnableFcsPage(JobName As String, Enable As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Enable</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FillTrackingChannelList</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
<CommentLine>fills popup menu for chosing a track for post-acquisition tracking</CommentLine>
<CommentLine> TODO: move in form</CommentLine>
</CommentLines>
<Declaration>Public Sub FillTrackingChannelList(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TrackClick</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   TrackClick(JobName As String, thisTrack As Integer, Exclusive As Boolean)</CommentLine>
<CommentLine>       Activate iTrack-th track for a specific JobName</CommentLine>
<CommentLine>       If Exclusive all other tracks are inactivated</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub TrackClick(JobName As String, iTrack As Integer, Optional Exclusive As Boolean = False)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iTrack</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Exclusive</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusActive_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> JobActive_Click</CommentLine>
<CommentLine> Enables the corresponding page</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AutofocusActive_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionActive_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionActive_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionActive_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionActive_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1Active_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1Active_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2Active_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2Active_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Fcs1Active_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> JobActive_Click</CommentLine>
<CommentLine> Enables the corresponding page</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub Fcs1Active_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusTrack1_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Activte Tracks for Jobs (For Autofocus need to be Click as the tracks are exclusive)</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AutofocusTrack1_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusTrack2_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AutofocusTrack2_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusTrack3_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AutofocusTrack3_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusTrack4_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AutofocusTrack4_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionTrack1_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionTrack1_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionTrack2_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionTrack2_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionTrack3_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionTrack3_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionTrack4_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionTrack4_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionTrack1_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionTrack1_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionTrack2_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionTrack2_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionTrack3_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionTrack3_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionTrack4_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionTrack4_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1Track1_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1Track1_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1Track2_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1Track2_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1Track3_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1Track3_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1Track4_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1Track4_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2Track1_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2Track1_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2Track2_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2Track2_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2Track3_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2Track3_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2Track4_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2Track4_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobZOffsetChange</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> ZOffset: This is offset added to current central slice position. This position depends on previous history</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub JobZOffsetChange(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionZOffset_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionZOffset_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionZOffset_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionZOffset_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1ZOffset_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1ZOffset_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2ZOffset_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2ZOffset_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobTrackXYZChange</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> TrackZ: If on the Z position will be updated to the latest Z position</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub JobTrackXYZChange(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusTrackZ_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AutofocusTrackZ_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionTrackZ_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionTrackZ_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1TrackZ_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1TrackZ_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2TrackZ_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2TrackZ_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusTrackXY_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> TrackXY: If on the XY position will be updated to the latest XY position</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AutofocusTrackXY_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionTrackXY_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionTrackXY_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1TrackXY_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1TrackXY_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2TrackXY_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2TrackXY_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusCenterOfMass_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> If CenterOfMass = True an internal analysis of center of mass is done</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AutofocusCenterOfMass_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionCenterOfMass_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionCenterOfMass_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1CenterOfMass_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1CenterOfMass_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2CenterOfMass_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2CenterOfMass_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobOiaActiveClick</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Online image analysis. If True then VBAMacro listen to external program (Fiji, Macropilot, Cellprofiler)</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub JobOiaActiveClick(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusOiaActive_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AutofocusOiaActive_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionOiaActive_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionOiaActive_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionOiaActive_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionOiaActive_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1OiaActive_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1OiaActive_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2OiaActive_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2OiaActive_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TriggermaxWait</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub TriggermaxWait(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2maxWait_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2maxWait_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1maxWait_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1maxWait_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusOiaSequential_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>  Sequential online image analysis. VBA Macro waits after acquisition of image for a change in registry code</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AutofocusOiaSequential_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionOiaSequential_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionOiaSequential_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1OiaSequential_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1OiaSequential_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2OiaSequential_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2OiaSequential_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ButtonOiaParallel</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Parallel online image analysis. VBA Macro reads before starting job in a text file with name of image file chopped of &quot;_Txxx.lsm&quot;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub ButtonOiaParallel(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusOiaParallel_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AutofocusOiaParallel_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionOiaParallel_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionOiaParallel_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionOiaParallel_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionOiaParallel_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1OiaParallel_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1OiaParallel_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2OiaParallel_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2OiaParallel_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setJob</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Load settings from ZEN into Form/Joblist</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub setJob(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusSetJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AutofocusSetJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionSetJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionSetJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionSetJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionSetJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1SetJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1SetJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2SetJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2SetJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FcsSetJob</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Load Settings from ZEN into Form for using it later</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub FcsSetJob(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Fcs1SetJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Fcs1SetJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FcsPutJob</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Put Fcs settings from Fcs Job into ZEN</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub FcsPutJob(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Fcs1PutJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Put Fcs settings from Fcs Job into ZEN</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub Fcs1PutJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>putJob</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Put Fcs settings from Fcs Job into ZEN</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub putJob(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusPutJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AutofocusPutJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionPutJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionPutJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionPutJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionPutJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1PutJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1PutJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2PutJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2PutJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobAcquire</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;Acquire one image for a job</CommentLine>
</CommentLines>
<Declaration>Private Sub JobAcquire(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusAcquire_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AutofocusAcquire_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionAcquire_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquisitionAcquire_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AlterAcquisitionAcquire_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AlterAcquisitionAcquire_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1Acquire_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1Acquire_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2Acquire_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2Acquire_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobFcsAcquire</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub JobFcsAcquire(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Fcs1Acquire_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Fcs1Acquire_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionTime</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Looping/RepetitionSettings</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub RepetitionTime(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionMin</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>if previously it was in sec divide by 60</CommentLine>
</CommentLines>
<Declaration>Private Sub RepetitionMin(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionSec</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionSec(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionMinChange</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionMinChange(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionSecChange</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionSecChange(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GlobalRepetitionMin_Change</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub GlobalRepetitionMin_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1RepetitionMin_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1RepetitionMin_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2RepetitionMin_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2RepetitionMin_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GlobalRepetitionSec_Change</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub GlobalRepetitionSec_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1RepetitionSec_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1RepetitionSec_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2RepetitionSec_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2RepetitionSec_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GlobalRepetitionTime_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub GlobalRepetitionTime_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1RepetitionTime_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1RepetitionTime_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2RepetitionTime_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2RepetitionTime_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionNumber</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionNumber(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GlobalRepetitionNumber_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub GlobalRepetitionNumber_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1RepetitionNumber_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1RepetitionNumber_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2RepetitionNumber_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2RepetitionNumber_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionInterval</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Set Interval or delay</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub RepetitionInterval(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GlobalRepetitionInterval_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub GlobalRepetitionInterval_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger1RepetitionInterval_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger1RepetitionInterval_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Trigger2RepetitionInterval_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Trigger2RepetitionInterval_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateRepetitionTimes</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub UpdateRepetitionTimes()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionTracksOn</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>  AcquisitionTracksOn()</CommentLine>
<CommentLine>  Checks if at least one track for acquisition is on</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Function AcquisitionTracksOn() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionTracksSetOff</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Sets all acquisitions to off</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Function AcquisitionTracksSetOff() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GridScanActive_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> GridScanActive_Click()</CommentLine>
<CommentLine>   Set the grid scan on or off. Changes also</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub GridScanActive_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GridScan_nRow_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub GridScan_nRow_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GridScan_nColumn_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub GridScan_nColumn_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GridScan_nColumnSub_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub GridScan_nColumnSub_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GridScan_nRowSub_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub GridScan_nRowSub_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SwitchEnableGridScanPage</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   SwitchEnableGridScanPage(Enable As Boolean)</CommentLine>
<CommentLine>   Disable or enable all buttons and slider</CommentLine>
<CommentLine>       [Enable] In - Sets the mini page enable status</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub SwitchEnableGridScanPage(Enable As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Enable</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GridScanValidFileButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Open a Dialog to set file name for storage of valid positions</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub GridScanValidFileButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GridScanPositionFileButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Open a dialog to set filename where positions of grid are stored</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub GridScanPositionFileButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StopAfterRepetition_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Stop all jobs after current repetition of current job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub StopAfterRepetition_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StopButton_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   StopButton_Click()</CommentLine>
<CommentLine>   ScanStop is used to tell different functions to stop execution and acquisition</CommentLine>
<CommentLine>   A second routine is called to stop the processes</CommentLine>
<CommentLine>       [ScanStop] Global/Out - Set to true</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub StopButton_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PauseButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Pause a job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub PauseButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CommandButtonNewDataBase_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   CommandButtonNewDataBase_Click()</CommentLine>
<CommentLine>   Open a Dialog to set output folder where to save the results. then cal SetDatabase to set global variables</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub CommandButtonNewDataBase_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DatabaseTextbox_KeyDown</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   DatabaseTextbox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)</CommentLine>
<CommentLine>   Only update the outputfolder when enter is pressed. This avoids creating a folded at every keystroke</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub DatabaseTextbox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>KeyCode</Name>
<Type>MSForms.ReturnInteger</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetDatabase</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>53</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   SetDatabase()</CommentLine>
<CommentLine>       [GlobalDataBaseName] Out/Global - The name of Outputfolder</CommentLine>
<CommentLine>       [LogFileNameBase]    Out/Global - The name of the LogfileName</CommentLine>
<CommentLine>       [Log]                Out/Global - If yes results are logged</CommentLine>
<CommentLine>       Set global variables and check if we can create Outputfolder</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub SetDatabase()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RestoreAcquisitionParameters</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   RestoreAcquisitionParameters()</CommentLine>
<CommentLine>   Restores the image acquisition recording parameters from GlobalBackupRecording</CommentLine>
<CommentLine>   recenter acquisition</CommentLine>
<CommentLine>   Lsm5.DsRecording Out - Recording settings</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub RestoreAcquisitionParameters()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetCurrentPositionOffsetButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   GetCurrentPositionOffsetButton_Click()</CommentLine>
<CommentLine>       Performs Autofocus and update ZOffset according to ZShift</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub GetCurrentPositionOffsetButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetCurrentPositionOffsetButtonRun</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>87</CountOfLines>
<CommentLines>
<CommentLine>   Dim X As Double</CommentLine>
<CommentLine>    Dim Y As Double</CommentLine>
<CommentLine>    Dim Z As Double</CommentLine>
<CommentLine>    Dim deltaZ As Double</CommentLine>
<CommentLine>    Dim GridPos As GridPosType</CommentLine>
<CommentLine>    Dim time As Double</CommentLine>
<CommentLine>    Dim pos As Double</CommentLine>
<CommentLine>    Dim LogMsg As String</CommentLine>
<CommentLine>    Dim SuccessRecenter As Boolean</CommentLine>
<CommentLine>    Running = True</CommentLine>
<CommentLine>    Dim NewPicture As DsRecordingDoc</CommentLine>
<CommentLine>    DisplayProgress &quot;Get Current Position Offset - Autofocus&quot;, RGB(0, &amp;HC0, 0)             &apos;Gives information to the user</CommentLine>
<CommentLine>    posTempZ = Lsm5.Hardware.CpFocus.Position</CommentLine>
<CommentLine>    Z = posTempZ</CommentLine>
<CommentLine>    X = Lsm5.Hardware.CpStages.PositionX</CommentLine>
<CommentLine>    Y = Lsm5.Hardware.CpStages.PositionY</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    &apos;recenter only after activation of new track</CommentLine>
<CommentLine>    If AutofocusActive Then</CommentLine>
<CommentLine>        StopScanCheck</CommentLine>
<CommentLine>        If AutofocusHRZ Then</CommentLine>
<CommentLine>            Lsm5.Hardware.CpHrz.Leveling</CommentLine>
<CommentLine>        End If</CommentLine>
<CommentLine>       &apos;FailSafeMoveStageZ (posTempZ) &apos;move at position</CommentLine>
<CommentLine>        &apos; Acquire image and calculate center of mass stored in XMass, YMass and ZMass</CommentLine>
<CommentLine>        DisplayProgress &quot;Autofocus Activate Tracks&quot;, RGB(0, &amp;HC0, 0)</CommentLine>
<CommentLine>        time = Timer</CommentLine>
<CommentLine>        If Not AutofocusForm.ActivateTrack(GlobalAutoFocusRecording, &quot;Autofocus&quot;) Then</CommentLine>
<CommentLine>            MsgBox &quot;No track selected for Autofocus! Cannot Autofocus!&quot;</CommentLine>
<CommentLine>            Exit Function</CommentLine>
<CommentLine>        End If</CommentLine>
<CommentLine></CommentLine>
<CommentLine>        LogMessage &quot;% Get current position: time activate AF track &quot; &amp; Round(Timer - time), Log, LogFileName, LogFile, FileSystem</CommentLine>
<CommentLine></CommentLine>
<CommentLine>        &apos;DoEvents</CommentLine>
<CommentLine>        &apos;Sample0Z = Lsm5.DsRecording.Sample0Z</CommentLine>
<CommentLine>        DisplayProgress &quot;Autofocus: Recenter prior AF acquisition.... &quot;, RGB(0, &amp;HC0, 0)</CommentLine>
<CommentLine>        DoEvents</CommentLine>
<CommentLine>        time = Timer</CommentLine>
<CommentLine>        If Not Recenter_pre(posTempZ, SuccessRecenter, ZENv) Then</CommentLine>
<CommentLine>            Exit Function</CommentLine>
<CommentLine>        End If</CommentLine>
<CommentLine>        pos = Lsm5.Hardware.CpFocus.Position</CommentLine>
<CommentLine>        time = Round(Timer - time, 2)</CommentLine>
<CommentLine>        LogMsg = &quot;% Get current position: center Z (pre AFimg) &quot; &amp; posTempZ &amp; &quot;, time required&quot; &amp; time &amp; &quot;, succes within rep. &quot; &amp; SuccessRecenter</CommentLine>
<CommentLine>        LogMessage LogMsg, Log, LogFileName, LogFile, FileSystem</CommentLine>
<CommentLine>        &apos;Use internal agorithm to compute Xmass etc.</CommentLine>
<CommentLine>        If Not MicroscopeIO.Autofocus_StackShift(NewPicture) Then</CommentLine>
<CommentLine>                Exit Function</CommentLine>
<CommentLine>        End If</CommentLine>
<CommentLine></CommentLine>
<CommentLine>        DisplayProgress &quot;Autofocus compute&quot;, RGB(0, &amp;HC0, 0)</CommentLine>
<CommentLine></CommentLine>
<CommentLine>        If Not ComputeNewCoordinatesAfterAF(NewPicture, X, Y, Z, deltaZ, &quot;Autofocus&quot;) Then</CommentLine>
<CommentLine>            Exit Function</CommentLine>
<CommentLine>        End If</CommentLine>
<CommentLine>        AcquisitionZOffset.Value = posTempZ - Z</CommentLine>
<CommentLine></CommentLine>
<CommentLine>        DisplayProgress &quot;Autofocus: Recenter after AF acquisition...&quot;, RGB(0, &amp;HC0, 0)</CommentLine>
<CommentLine></CommentLine>
<CommentLine>        time = Timer</CommentLine>
<CommentLine>        If Not Recenter_post(posTempZ, SuccessRecenter, ZENv) Then</CommentLine>
<CommentLine>            Exit Function</CommentLine>
<CommentLine>        End If</CommentLine>
<CommentLine>        time = Round(Timer - time, 2)</CommentLine>
<CommentLine>        LogMsg = &quot;% Get current position: recenter Z (post AFImg) &quot; &amp; posTempZ</CommentLine>
<CommentLine>        If (Lsm5.DsRecording.ScanMode &lt;&gt; &quot;Stack&quot; And Lsm5.DsRecording.ScanMode &lt;&gt; &quot;ZScan&quot;) Or AutofocusHRZ Then</CommentLine>
<CommentLine>                LogMsg = LogMsg &amp; &quot;; obtained central slide &quot; &amp; pos &amp; &quot;; position &quot; &amp; pos &amp; &quot;, time required &quot; &amp; time &amp; &quot;, succes within rep. &quot; &amp; SuccessRecenter</CommentLine>
<CommentLine>        Else</CommentLine>
<CommentLine>            LogMsg = LogMsg &amp; &quot;; obtained central slide &quot; &amp; Lsm5.DsRecording.FrameSpacing * (Lsm5.DsRecording.FramesPerStack - 1) / 2 _</CommentLine>
<CommentLine>            - Lsm5.DsRecording.Sample0Z + pos &amp; &quot;; position &quot; &amp; pos &amp; &quot;, time required &quot; &amp; time &amp; &quot;, succes within rep. &quot; &amp; SuccessRecenter</CommentLine>
<CommentLine>        End If</CommentLine>
<CommentLine>        LogMessage LogMsg, Log, LogFileName, LogFile, FileSystem</CommentLine>
<CommentLine></CommentLine>
<CommentLine>        posTempZ = Z</CommentLine>
<CommentLine>        time = Timer</CommentLine>
<CommentLine>        If Not Recenter_pre(posTempZ, SuccessRecenter, ZENv) Then</CommentLine>
<CommentLine>            Exit Function</CommentLine>
<CommentLine>        End If</CommentLine>
<CommentLine>        time = Round(Timer - time, 2)</CommentLine>
<CommentLine>        LogMsg = &quot;% Get current position: center Z (end) &quot; &amp; posTempZ &amp; &quot;, time required&quot; &amp; time &amp; &quot;, success&quot; &amp; SuccessRecenter</CommentLine>
<CommentLine>        LogMessage LogMsg, Log, LogFileName, LogFile, FileSystem</CommentLine>
<CommentLine>    End If</CommentLine>
<CommentLine>    GetCurrentPositionOffsetButtonRun = True</CommentLine>
</CommentLines>
<Declaration>Private Function GetCurrentPositionOffsetButtonRun() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusButton_Click</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   AutofocusButton_Click()</CommentLine>
<CommentLine>   calls AutofocusButtonRun</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub AutofocusButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AutofocusButtonRun</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>113</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   AutofocusButtonRun (Optional AutofocusDoc As DsRecordingDoc = Nothing) As Boolean</CommentLine>
<CommentLine>   Runs a Z-stacks, compute center of mass, if selected acquire an image at computed position + ZOffset</CommentLine>
<CommentLine>   If AutofocusTrackZ : position is updated to computed position from autofocus (without ZOffset!)</CommentLine>
<CommentLine>   If AutofocusTrackXY and FrameToggle: position of X and Y are changed</CommentLine>
<CommentLine>       [AutofocusDoc] - A recording Doc. If = Nothing then it will create a new recording</CommentLine>
<CommentLine></CommentLine>
<CommentLine>   Additional comments: The function works best with piezo. With Fast-Zline (Onthefly) acquisition is less precise</CommentLine>
<CommentLine>                        Lots of test to check that focus returned to workingposition. Lsm5.Hardware.CpFocus.Position</CommentLine>
<CommentLine>                        does not give actual position when stage is moving after acquisition.</CommentLine>
<CommentLine>                        Lsm5.DsRecording.Sample0Z provides the actual shift to the central slice</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Function AutofocusButtonRun(Optional AutofocusDoc As DsRecordingDoc = Nothing, Optional FilePath As String = &quot;&quot;) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>AutofocusDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>Nothing</DefaultValue>
</Parameter>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>StartButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>49</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   StartButton_Click()</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub StartButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StartSetting</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>171</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   StartSetting()</CommentLine>
<CommentLine>   Setups and controls before start of experiment</CommentLine>
<CommentLine>       Create list of positions for Grid or Multiposition</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Function StartSetting() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Pause</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Pause()</CommentLine>
<CommentLine>   Function called when ScanPause = True</CommentLine>
<CommentLine>   Checks state and wait for action in Form</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Pause() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>AutoFindTracks</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>77</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   AutoFindTracks()</CommentLine>
<CommentLine>   Set the names of the tracks and find possible tracks</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub AutoFindTracks()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CloseButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CloseButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ReInitializeButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub ReInitializeButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CreditButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CreditButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TextBoxFileName_KeyDown</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub TextBoxFileName_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>KeyCode</Name>
<Type>MSForms.ReturnInteger</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetFileName</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub SetFileName()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>fileFormatlsm_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub fileFormatlsm_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>fileFormatczi_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub fileFormatczi_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>wait</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> TODO a long does it wait</CommentLine>
<CommentLine>Wait time in sec?</CommentLine>
</CommentLines>
<Declaration>Sub wait(PauseTime As Single)</Declaration>
<Parameters>
<Parameter>
<Name>PauseTime</Name>
<Type>Single</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TimeDisplay</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function TimeDisplay(Value As Double) As String</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>AcquisitionTime</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function AcquisitionTime() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>CheckAutofocusTrack</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>43</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>    CheckAutofocusTrack( SelectedTrack As Integer )</CommentLine>
<CommentLine>    Checks whether the track that was selected for autofocusing only contains a single channel (alternetivly defines one of the checked channels)</CommentLine>
<CommentLine>    and finds the name of the autofocusing channel</CommentLine>
<CommentLine>       [SelectedTrack] In - Number of selected track</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub CheckAutofocusTrack(SelectedTrack As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>SelectedTrack</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ChangeButtonStatus</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   ChangeButtonStatus(Enable As Boolean)</CommentLine>
<CommentLine>   Reset status of buttons on rightside of form</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub ChangeButtonStatus(Enable As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Enable</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CreateAlterImageDatabase</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CreateAlterImageDatabase(AlterDatabaseName, MyPath)</Declaration>
<Parameters>
<Parameter>
<Name>AlterDatabaseName</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>MyPath</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : AutofocusForm</CommentLine>
<CommentLine> Author    : Antonio Politi</CommentLine>
<CommentLine> Version   : 3.0.10</CommentLine>
<CommentLine> Purpose   : Form to manage Imagingd Fcs Jobs</CommentLine>
<CommentLine> WARNING ZEN does not use spatial units in a consistent way. Switches between um and meter and pixel WARNING&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> for imaging and moving the stage</CommentLine>
<CommentLine> Lsm5.Hardware.Cpstages.PositionX: Absolute coordinate in um</CommentLine>
<CommentLine> Lsm5.Hardware.CpFocus.Position: Absolute coordinate in meter</CommentLine>
<CommentLine> Lsm5.DsRecordingActiveDocObject.Recording.SampleSpacing: in meter. this is the pixelSize</CommentLine>
<CommentLine> Lsm5.DsRecording.SampleSpacing: in um. this is the pixelSize. In both cases we access the same object</CommentLine>
<CommentLine></CommentLine>
<CommentLine> All FCS positions are given in um. For X and Y with respect to center of the image. So 0 0 is in the middle of the image. For</CommentLine>
<CommentLine> Z one provides an absolute position also un um</CommentLine>
<CommentLine></CommentLine>
<CommentLine> For ROI the coordinates are in pixels</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>CloseButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Close</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>LabelDataBase</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Autofocus</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ProgressLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Ready</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GetCurrentPositionOffsetButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Get current position offset</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StartButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>START</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ReinitializeButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Reinitialize</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>MultipleLocationToggle</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Multiple Locations</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>SingleLocationToggle</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Single Location</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>CreditButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Credit...</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StopAfterRepetition</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>STOP after repeption</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StopButton</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>STOP</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PauseButton</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>PAUSE</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FocusMap</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Focus Map</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ButtonLoadSettings</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>LOAD Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ButtonSaveSettings</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>SAVE Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame3</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GlobalRepetitionTimeLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Delay</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame8</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Output</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GlobalRepetitionNumber</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>GlobalRepetitionNumberLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Number of repetitions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GlobalRepetitionTime</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>TextBoxFileName</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>LabelFileName</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Base File Name</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame13</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Locations</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>DatabaseLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>No Output Folder</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>DatabaseTextbox</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>Label21</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Folder</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GlobalRepetitionInterval</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Interval (not delay)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>LocationTextLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>CommandButtonNewDataBase</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>...</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>MultiPage1</Name>
<ProgId>MSForms.MultiPage</ProgId>
<ClassName>MultiPage</ClassName>
</Control>
<Control>
<Name>AutofocusActive</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusTrack4</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track4</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusTrack3</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track3</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusTrack2</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track2</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusTrack1</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusPeriod</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>AutofocusPeriodLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Period</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusSaveImage</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Save image</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusOiaActive</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusOiaSequential</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>sequential</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusOiaParallel</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>parallel</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusSetJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>ZEN-&gt;Macro</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusPutJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value> Macro-&gt;ZEN</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusCenterOfMassChannel</Name>
<ProgId>MSForms.ComboBox</ProgId>
<ClassName>ComboBox</ClassName>
</Control>
<Control>
<Name>AutofocusTrackZ</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track Z</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusTrackXY</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track XY</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusCenterOfMass</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Center of Mass</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusLabel1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusLabel2</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame26</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Online Image Analysis</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame27</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Tracking/Focusing</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusAcquire</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AcquireJob</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Track1</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Track2</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track2</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Track3</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track3</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Track4</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track4</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Autofocus</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Extra AF</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1RepetitionNumber</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Trigger1RepetitionTimeLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Delay</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1RepetitionNumberLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Number of repetitions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1RepetitionTime</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Trigger1RepetitionInterval</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Interval (not delay)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame17</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Looping</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame19</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Online Image Analysis</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1OiaActive</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1OiaSequential</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>sequential</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1OiaParallel</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>parallel</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1CenterOfMassChannel</Name>
<ProgId>MSForms.ComboBox</ProgId>
<ClassName>ComboBox</ClassName>
</Control>
<Control>
<Name>Trigger1TrackZ</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track Z</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1TrackXY</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track XY</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame21</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Tracking/Focusing</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1CenterOfMass</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Center of Mass</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1PeriodLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Period</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Period</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>Trigger1SetJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value> ZEN-&gt;Macro</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1PutJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Macro-&gt;ZEN</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1RepetitionMin</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>min</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1SaveImage</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>SaveImage</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1RepetitionSec</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>sec</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1ZOffset</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Trigger1ZOffsetLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Z Offset (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Label2</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Label1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1OptimalPtNumberLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value># Pts</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1OptimalPtNumber</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>Trigger1maxWait</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>Trigger1maxWaitLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>max wait  (sec)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Acquire</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AcquireJob</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Active</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionActive</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionTrack4</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track4</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionTrack3</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track3</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionTrack2</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track2</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionTrack1</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionSetJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>ZEN-&gt;Macro</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionPutJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Macro-&gt;ZEN</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionSaveImage</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>SaveImage</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionPeriodLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Period</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionZOffset</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>AlterAcquisitionZOffsetLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Z Offset (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionPeriod</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>AlterAcquisitionLabel1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionLabel2</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame28</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Online Image Analysis</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionOiaActive</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionOiaSequential</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>sequential</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionOiaParallel</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>parallel</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionCenterOfMassChannel</Name>
<ProgId>MSForms.ComboBox</ProgId>
<ClassName>ComboBox</ClassName>
</Control>
<Control>
<Name>AlterAcquisitionTrackZ</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track Z</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionTrackXY</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track XY</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionCenterOfMass</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Center of Mass</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame29</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Tracking/Focusing</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionAcquire</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AcquireJob</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dColumnLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>dCol (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dRow</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_nRowLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Row (Y)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_nRow</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_dColumn</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_nColumn</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_nColumnLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Column (X)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanActive</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanDescriptionLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Performs a meandering grid scan.            Reference point (default Col 1, Row 1)  is first marked Stage.                Default: All (sub)positions are visited.                            validGridDefault.txt: file in outputfolder indicating active positions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_posLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Wells/Positions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dRowsub</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_dColumnsubLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>dCol (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_nRowsub</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_dColumnsub</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_nColumnsub</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_subLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value> Sub-Positions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>CheckBoxGridScan_FindGoodPositions</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Find good positions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_nColumnsubLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Column (X)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_nRowsubLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Row (Y)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dRowLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>dRow (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dRowsubLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>dRow (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_refColumn</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_refRow</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_refRowLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Ref. Row</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_refColumnLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Ref. Column</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_validGridDefault</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>use validGridDefault.txt</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanPositionFileButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>...</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanPositionFile</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScanPositionFileLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>PosGrid</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanValidFile</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>CommandButton1</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>...</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanValidFileButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>...</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanValidFileLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>ValidGrid</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame25</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Read positions and activity of grid from file</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AFTest1</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AFTest1: LS-FastZLine, LS-Stage</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AFTest2</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AFTest2: LS-Piezo, LS-Piezo</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AFTest3</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AFTest3: LS-Stage, LS-Stage</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AFTest4</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AFTest4: LS-Piezo, LS-Stage </Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AFTest_Repetitions</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>AFTest5</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AFTest5: Repeated FastZline </Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AFTest_Repetitions_Label</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Repetitions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AFTestAll</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Run all Tests</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AFTest6</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AFTest6: LS-Piezo, FS-Piezo</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AFTest7</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AFTest7: LS-FastZLine, FS-Stage</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Track1</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Track2</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track2</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Track3</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track3</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Track4</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track4</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Autofocus</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Extra AF</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2ZOffset</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Trigger2ZOffsetLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Z Offset (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2RepetitionNumber</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Trigger2RepetitionTimeLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Delay</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2RepetitionNumberLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Number of repetitions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2RepetitionTime</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Trigger2RepetitionInterval</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Interval (not delay)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame22</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Looping</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame23</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Online Image Analysis</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2OiaActive</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2OiaSequential</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>sequential</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2OiaParallel</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>parallel</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2CenterOfMassChannel</Name>
<ProgId>MSForms.ComboBox</ProgId>
<ClassName>ComboBox</ClassName>
</Control>
<Control>
<Name>Trigger2TrackZ</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track Z</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2TrackXY</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track XY</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame24</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Tracking/Focusing</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2CenterOfMass</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Center of Mass</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2PeriodLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Period</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Period</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>Trigger2SetJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>ZEN-&gt;Macro</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2PutJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Macro-&gt;ZEN</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2SaveImage</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>SaveImage</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2RepetitionSec</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>sec</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2RepetitionMin</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>min</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Label2</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Label1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2maxWaitLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>max wait  (sec)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2OptimalPtNumberLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value># Pts</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2OptimalPtNumber</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>Trigger2maxWait</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>Trigger2Acquire</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AcquireJob</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Active</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionActive</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionTrack4</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track4</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionTrack3</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track3</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionTrack2</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track2</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionTrack1</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionZOffset</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>AcquisitionZOffsetLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Z Offset (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionCenterOfMassChannel</Name>
<ProgId>MSForms.ComboBox</ProgId>
<ClassName>ComboBox</ClassName>
</Control>
<Control>
<Name>AcquisitionTrackZ</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track Z</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionTrackXY</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track XY</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame15</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Tracking/Focusing</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame18</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Online Image Analysis</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionOiaActive</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionOiaSequential</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>sequential</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionOiaParallel</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>parallel</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionPeriodLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Period</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionPeriod</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>AcquisitionCenterOfMass</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Center of Mass</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionSetJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value> ZEN-&gt;Macro</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionPutJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Macro-&gt;ZEN</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionSaveImage</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Save image</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionLabel1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionLabel2</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Imaging Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionAcquire</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AcquireJob</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Fcs1SetJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value> ZEN-&gt;Macro</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Fcs1PutJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Macro-&gt;ZEN</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Fcs1Acquire</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AcquireJob</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Fcs1Label2</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Fcs1Label1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>No Fcs Job defined yet</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Fcs1Active</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Active</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame11</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Global Looping</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GlobalRepetitionSec</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>sec</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GlobalRepetitionMin</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>min</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>fileFormatlsm</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>lsm</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>fileFormatczi</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>czi</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AUTOFOCUS (1st)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquisitionLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>ACQUISITION (2nd)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AlterAcquisitionLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>AL. ACQUISITION (3rd)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger1Label</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>TRIGGER1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Trigger2Label</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>TRIGGER2</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Fcs1Label</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>FCS1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Fcs1ZOffset</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Fcs1ZOffsetLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Z Offset (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ShowOiaKeys</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Show Oia Keys</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AutofocusZOffset</Name>
<ProgId>MSForms.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>AutofocusZOffsetLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Z Offset (um)</Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>CreditForm</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>CloseButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CloseButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>TextBox1</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>CloseButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Close</Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>TestCode</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>TestCode</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>105</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>test1</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub test1()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>test</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub test()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DisplayAmplifierDescriptions</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Test CODE</CommentLine>
<CommentLine>   DisplayAmplifierDescriptions()</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub DisplayAmplifierDescriptions()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>CommonDialogAPI</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>CommonDialogAPI</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>75</CountOfDeclarationLines>
<CountOfLines>156</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>ShowOpen</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ShowOpen(Filter As String, Flags As Long, Optional FileName As String = &quot;&quot;, Optional initDir As String = &quot;&quot;, Optional DialogTitle As String = &quot;Open&quot;) As String</Declaration>
<Parameters>
<Parameter>
<Name>Filter</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Flags</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>initDir</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>DialogTitle</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Open&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ShowSave</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ShowSave(Filter As String, Flags As Long, FileName As String, Optional initDir As String = &quot;&quot;, Optional DialogTitle As String = &quot;Save As&quot;) As String</Declaration>
<Parameters>
<Parameter>
<Name>Filter</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Flags</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>initDir</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>DialogTitle</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Save As&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FormatUserForm</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>Minimize button for Macro window</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Sub FormatUserForm(UserFormCaption As String)</Declaration>
<Parameters>
<Parameter>
<Name>UserFormCaption</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>CommonDialog allows for openSave file windows to be used</CommentLine>
<CommentLine> From http://www.activevb.de/tipps/vb6tipps/tipp0368.html</CommentLine>
<CommentLine> http://msdn.microsoft.com/en-us/library/ms645524%28VS.85%29.aspx</CommentLine>
<CommentLine>--------- Anfang Modul &quot;Module1&quot; alias Module1.bas ---------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>FileIO</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>FileIO</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>22</CountOfDeclarationLines>
<CountOfLines>150</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>ZeroString</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   ZeroString(NrofZeros As Integer) As String</CommentLine>
<CommentLine>   Returns a string of zeros</CommentLine>
<CommentLine>       [NrofZeros] In - Length of string</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ZeroString(NrofZeros As Integer) As String</Declaration>
<Parameters>
<Parameter>
<Name>NrofZeros</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FileExist</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   FileExist(ByVal Pathname)</CommentLine>
<CommentLine>   Check if file is present or not</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function FileExist(ByVal PathName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>PathName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CheckDir</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> CheckDir</CommentLine>
<CommentLine> Check that directory exists</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function CheckDir(ByVal PathName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>PathName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SafeOpenTextFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Tries to open a file. If already open resume to next command</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SafeOpenTextFile(ByVal PathName As String, ByRef File As TextStream, ByVal FileSystem As FileSystemObject) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>PathName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>File</Name>
<Type>TextStream</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileSystem</Name>
<Type>FileSystemObject</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>LogMessage</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   LogMessage(ByVal Msg As String, ByVal Log As Boolean, ByVal PathName As String, ByRef File As TextStream, ByVal FileSystem As FileSystemObject)</CommentLine>
<CommentLine>   Write Msg to a File if Log is on otherwise it does nothing</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function LogMessage(ByVal Msg As String, ByVal Log As Boolean, ByVal PathName As String, ByRef File As TextStream, ByVal FileSystem As FileSystemObject)</Declaration>
<Parameters>
<Parameter>
<Name>Msg</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Log</Name>
<Type>Boolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>PathName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>File</Name>
<Type>TextStream</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileSystem</Name>
<Type>FileSystemObject</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> A list of functions to open and write text files, check their existance etc</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>FCSFunctions</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>FCSFunctions</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>15</CountOfDeclarationLines>
<CountOfLines>105</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>GetFcsPosition</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   GetFcsPosition(PosX As Double, PosY As Double, PosZ As Double)</CommentLine>
<CommentLine>   reads position of small crosshair</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub GetFcsPosition(PosX As Double, PosY As Double, PosZ As Double, Optional pos As Long = -1)</Declaration>
<Parameters>
<Parameter>
<Name>PosX</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>PosY</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>PosZ</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetFcsPosition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   SetFcsPosition(PosX As Double, PosY As Double, PosZ As Double, Pos As Long)</CommentLine>
<CommentLine>   Create a new position if Pos &gt; FcsPositions.PositionListSize</CommentLine>
<CommentLine>   then all positions inbetween are set to 0</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SetFcsPosition(PosX As Double, PosY As Double, PosZ As Double, pos As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>PosX</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>PosY</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>PosZ</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setFcsPositions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   SetFcsPosition(PosX As Double, PosY As Double, PosZ As Double, Pos As Long)</CommentLine>
<CommentLine>   Create a new position if Pos &gt; FcsPositions.PositionListSize</CommentLine>
<CommentLine>   then all positions inbetween are set to 0</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setFcsPositions(positions() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>positions()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetFcsPositionListLength</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   GetFcsListPositionLength()</CommentLine>
<CommentLine>   Maximal number of positions</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function GetFcsPositionListLength() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>ClearFcsPositionList</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ClearFcsPositionList()</CommentLine>
<CommentLine>   Remove all FCSpositions stored</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ClearFcsPositionList()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Module contains Functions used during Fcs</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>RoiControl</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>RoiControl</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>122</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>ClearVectorElements</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> remove all vector elements</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ClearVectorElements() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>MakeVectorElement</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Make a Vectorelement (a ROI) to be used for bleaching or imaging</CommentLine>
<CommentLine>   TypeVectorOverlay (In) - speifies type of ROI. &quot;circle&quot;, &quot;reactangle&quot;, &quot;polyline&quot;, &quot;ellipse&quot;</CommentLine>
<CommentLine>   X, Y              (In) - X and Y coordinates in pixel!! Upper left corner of image is 0, 0</CommentLine>
<CommentLine>   Aim               (In) - Either &quot;acquisition&quot;, &quot;bleaching&quot; (also includes analysis) or &quot;analysis&quot;</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MakeVectorElement(ByVal TypeVectorOverlay As String, X() As Double, Y() As Double, ByVal aim As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>TypeVectorOverlay</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>X()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Y()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>aim</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>TestMakeVectorElement</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub TestMakeVectorElement()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Module for Roi control. Due to roi class this module is close to become obsolete</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>ImagingJobs</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ImagingJobs</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>10</CountOfDeclarationLines>
<CountOfLines>555</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>MsgNoJob</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub MsgNoJob(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Initialize a series of Jobs with given name</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initialize(Names() As String, Recording As DsRecording, ZEN As Object)</Declaration>
<Parameters>
<Parameter>
<Name>Names()</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Recording</Name>
<Type>DsRecording</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getZENv</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getZENv() As Integer</Declaration>
<Parameters>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>setZENv</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function setZENv(Value As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>resetJobs</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub resetJobs()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddJob</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> AddJob</CommentLine>
<CommentLine>   Add Job and increase number of Jobs</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub AddJob(Name As String, Recording As DsRecording, ZEN As Object)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Recording</Name>
<Type>DsRecording</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Set the job with Name from ZEN using a given recording</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setJob(Name As String, Recording As DsRecording, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Recording</Name>
<Type>DsRecording</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetRecording</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetRecording(Name As String) As DsRecording</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>DsRecording</ReturnType>
</Procedure>
<Procedure>
<Name>checkJobName</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function checkJobName(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>putJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Put the job with Name from Macro into ZEN</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function putJob(Name As String, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setRoiMaxNr</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>Roi Handler. This manages vectorElements in ZEN. Every Job can have some Rois associated to</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setRoiMaxNr(Name As String, roiMaxNr As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>roiMaxNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setRoi</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setRoi(Name As String, ARoi As Roi, roiNr As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ARoi</Name>
<Type>Roi</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>roiNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setRois</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setRois(Name As String, Rois() As Roi)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Rois()</Name>
<Type>Roi</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getRoi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRoi(Name As String, roiNr As Integer) As Roi</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>roiNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Roi</ReturnType>
</Procedure>
<Procedure>
<Name>createRois</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> create ROIs in ZEN</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub createRois(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>clearRois</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub clearRois(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TrackNumber</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function TrackNumber(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>setTimeSeries</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>    UpdateJobTimeSeries: if True the Job also has time Series</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setTimeSeries(Name As String, Value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getTimeSeries</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getTimeSeries(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getSamplesPerLine</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> X-Lines</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getSamplesPerLine(Name As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getLinesPerFrame</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Y-Lines</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getLinesPerFrame(Name As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>setTimeBetweenStacks</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Interval for time series</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setTimeBetweenStacks(Name As String, Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getTimeBetweenStacks</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getTimeBetweenStacks(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setTrackNumber</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setTrackNumber(Name As String, Value As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setAcquireTrack</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setAcquireTrack(Name As String, iTrack As Integer, Value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iTrack</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getAcquireTrack</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getAcquireTrack(Name As String, iTrack As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iTrack</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isAcquiring</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isAcquiring(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setBleachTrack</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setBleachTrack(Name As String, Value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getBleachTrack</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   True if track is bleaching</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getBleachTrack(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setFramesPerStack</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   This is the number of Z-stacks</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setFramesPerStack(Name As String, Value As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getFramesPerStack</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getFramesPerStack(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>setFrameSpacing</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   This is dZ (in um)</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setFrameSpacing(Name As String, Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getFrameSpacing</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getFrameSpacing(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getSampleSpacing</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   This is dXdY in um</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getSampleSpacing(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setZoom</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setZoom(Name As String, Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getZoom</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getZoom(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getCorrX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getCorrX(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getCorrY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getCorrY(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setCorrX</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setCorrX(Name As String, Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setCorrY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setCorrY(Name As String, Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getCentralPtPx</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getCentralPtPx(Name As String) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>setStacksPerRecord</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Number of time points</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setStacksPerRecord(Name As String, Value As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getStacksPerRecord</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getStacksPerRecord(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>SetScanMode</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Sets usage of piezo or no</CommentLine>
<CommentLine>   ZScan: X-Z Scan</CommentLine>
<CommentLine>   Stack: Frame mode with Zstacks</CommentLine>
<CommentLine>   Plane: just one plane</CommentLine>
<CommentLine>   Line: Just a Line</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub SetScanMode(Name As String, Value As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetScanMode</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetScanMode(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>isZStack</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>true if record is a ZStack</CommentLine>
</CommentLines>
<Declaration>Public Function isZStack(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SetSpecialScanMode</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Sets usage of piezo or no</CommentLine>
<CommentLine>   ZScanner: Piezo</CommentLine>
<CommentLine>   FocusStep: Focuswheel</CommentLine>
<CommentLine>   OnTheFly: Focuswheel that is not syncronized with imaging</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub SetSpecialScanMode(Name As String, Value As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetSpecialScanMode</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetSpecialScanMode(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>setScanDirection</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Sets Unidirectional or bidirectional scan</CommentLine>
<CommentLine>    0: Unidirectional</CommentLine>
<CommentLine>    1: bidirectional scan</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setScanDirection(Name As String, Value As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getScanDirection</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getScanDirection(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>setUseRoi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Set and Get the usage of ROIs</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setUseRoi(Name As String, Value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getUseRoi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getUseRoi(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setPixelDwell</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Set and Get the pixelDwellTime of Job</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setPixelDwell(Name As String, pixelDwell As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pixelDwell</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getPixelDwell</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getPixelDwell(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptor(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptorSettings</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job to be used as settings</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptorSettings(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>splittedJobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function splittedJobDescriptor(Name As String, MaxLines As Integer) As String()</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>MaxLines</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String()</ReturnType>
</Procedure>
<Procedure>
<Name>changeJobFromDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function changeJobFromDescriptor(Name As String, Descriptor As String, Value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> A Class to manage several AJob: imagingJob with different Settings and Tracks</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>JobsManager</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>JobsManager</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>47</CountOfDeclarationLines>
<CountOfLines>1586</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>AcquireJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>80</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : AcquireJob</CommentLine>
<CommentLine> Purpose   : Sets and execute an imaging Job</CommentLine>
<CommentLine> Variables : JobName - The name of the Job to execute</CommentLine>
<CommentLine>             RecordingDoc - the dsRecording where image is stored</CommentLine>
<CommentLine>             RocordingName - The name of the recording (also for the GUI)</CommentLine>
<CommentLine>             position - A vector with stage position where to acquire image X, Y, and Z (cental slice) in um</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function AcquireJob(JobName As String, RecordingDoc As DsRecordingDoc, RecordingName As String, position As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>position</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>AcquireFcsJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : AcquireFcsJob</CommentLine>
<CommentLine> Purpose   : Sets and execute an FCS Job at specified position</CommentLine>
<CommentLine> Variables : JobName  -  The name of the Job to execute</CommentLine>
<CommentLine>             RecordingDoc - the DsRecordingDoc of the Fcs measurements</CommentLine>
<CommentLine>             FcsData -  the AimFcsData containing the Fcs</CommentLine>
<CommentLine>             FileName - Name appearing on top of RecordingDoc</CommentLine>
<CommentLine>             positions -  A vector array with position where to acquire Fcs X, Y (relative to center of image), and Z (absolute). Unit are in meter!!</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function AcquireFcsJob(JobName As String, RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, FileName As String, positions() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>positions()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ExecuteFcsJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>59</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ExecuteFcsJob</CommentLine>
<CommentLine> Purpose   : Executes the AcquireFcsJob and save data and positions</CommentLine>
<CommentLine> Variables : JobName  -  The name of the Job to execute</CommentLine>
<CommentLine>             RecordingDoc - the DsRecordingDoc of the Fcs measurements</CommentLine>
<CommentLine>             FcsData -  the AimFcsData containing the Fcs</CommentLine>
<CommentLine>             FilePath - Path to store file</CommentLine>
<CommentLine>             FileName - Name of file</CommentLine>
<CommentLine>             positions -  A vector array with position where to acquire Fcs X, Y (relative to center of image), and Z (absolute). Unit are in meter!!</CommentLine>
<CommentLine>             positionsPx - A vector array with position in px relative to upper corner  of image. Z = 0 bottom of stack. Used for logging the position</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function ExecuteFcsJob(JobName As String, RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, FilePath As String, FileName As String, positions() As Vector, positionsPx() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>positions()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>positionsPx()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ExecuteJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ExecuteJob</CommentLine>
<CommentLine> Purpose   : Executes part of imaging Job and save the file (no tracking)</CommentLine>
<CommentLine> Variables : JobName  -  The name of the Job to execute</CommentLine>
<CommentLine>             RecordingDoc - the DsRecordingDoc of the Fcs measurements</CommentLine>
<CommentLine>             FilePath - Path to store file</CommentLine>
<CommentLine>             FileName - Name of file</CommentLine>
<CommentLine>             StgPos -  stage position where to acquire image X, Y (absolute), and Z (absolute). Unit are in micrometer!!</CommentLine>
<CommentLine>             delatZ - size of Z stack. Not currently used</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function ExecuteJob(JobName As String, RecordingDoc As DsRecordingDoc, FilePath As String, FileName As String, StgPos As Vector, Optional deltaZ As Integer = -1) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FilePath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>StgPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>deltaZ</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>TrackOffLine</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>51</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : TrackOffLine</CommentLine>
<CommentLine> Purpose   : Compute new positions according to center of mass</CommentLine>
<CommentLine> Variables : JobName - Origin job of image</CommentLine>
<CommentLine>             RecordingDoc - the Recording where image is store</CommentLine>
<CommentLine>             currentPosition - current absolute stage position (in um)</CommentLine>
<CommentLine> Returns   : a new stage position</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function TrackOffLine(JobName As String, RecordingDoc As DsRecordingDoc, currentPosition As Vector) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>TrackJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : TrackJob</CommentLine>
<CommentLine> Purpose   : Update a position with new position according to task specified (either none, Z, XY, or XYZ)</CommentLine>
<CommentLine> Variables : JobName - Name of job (refer to access of AutofocusForm)</CommentLine>
<CommentLine>             StgPos - Current stage position (absolute in um)</CommentLine>
<CommentLine>             StgPosNew - New stage position</CommentLine>
<CommentLine> Returns :   A stage position</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function TrackJob(JobName As String, StgPos As Vector, StgPosNew As Vector) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>StgPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>StgPosNew</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>ExecuteJobAndTrack</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>79</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ExecuteJobAndTrack</CommentLine>
<CommentLine> Purpose   : Execute a imaging job and perform a tracking. Returns an updated position X, Y, and Z</CommentLine>
<CommentLine> Variables : GridName - Name of position grid</CommentLine>
<CommentLine>             JobName - Name of imaging Job</CommentLine>
<CommentLine>             RecordingDoc - The recording Doc</CommentLine>
<CommentLine>             parentPath - the main imaging path</CommentLine>
<CommentLine>             StgPos - current stage position (absolute in um)</CommentLine>
<CommentLine>             Success - True if function finishes</CommentLine>
<CommentLine> Returns : an updated stage position (absolute in um)</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function ExecuteJobAndTrack(GridName As String, JobName As String, RecordingDoc As DsRecordingDoc, parentPath As String, StgPos As Vector, Success As Boolean) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>GridName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>parentPath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>StgPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>StartJobOnGrid</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>153</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : StartJobOnGrid</CommentLine>
<CommentLine> Purpose   : Performs imaging/fcs on a grid. Pretty much the whole macro runs through here</CommentLine>
<CommentLine> Variables : GridName -</CommentLine>
<CommentLine>             JobName -</CommentLine>
<CommentLine>             parentPath - Path from where job has been initiated</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function StartJobOnGrid(GridName As String, JobName As String, RecordingDoc As DsRecordingDoc, parentPath As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>GridName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>parentPath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>FileNameFromGrid</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : FileNameFromGrid</CommentLine>
<CommentLine> Purpose   : Derive filename from Grid and repetition</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function FileNameFromGrid(GridName As String, JobName As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>GridName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FilePathSuffix</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : FilePathSuffix</CommentLine>
<CommentLine> Purpose   : Derive filepath Suffix from Grid and repetition</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function FilePathSuffix(GridName As String, JobName As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>GridName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>checkForMaximalDisplacement</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : checkForMaximalDisplacement</CommentLine>
<CommentLine> Purpose   : check  that newPos is not further away than the size of the image. In fact it should be half the image</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             currentPos - stage position in um</CommentLine>
<CommentLine>             newPos - new stage position in um</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function checkForMaximalDisplacement(JobName As String, currentPos As Vector, newPos As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>checkForMaximalDisplacementVec</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : checkForMaximalDisplacementVec</CommentLine>
<CommentLine> Purpose   : check  that newPos vectors are not further away than the size of the image</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             currentPos - stage position in um</CommentLine>
<CommentLine>             newPos - vector of stage positions in um</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function checkForMaximalDisplacementVec(JobName As String, currentPos As Vector, newPos() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>checkForMaximalDisplacementPixels</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : checkForMaximalDisplacementPixels</CommentLine>
<CommentLine> Purpose   : check  that newPos is within possible boundary using pixels</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             newPos - A new position in pixels 0,0,0 is upper left bottom slice</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function checkForMaximalDisplacementPixels(JobName As String, newPos As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>checkForMaximalDisplacementVecPixels</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : checkForMaximalDisplacementVecPixels</CommentLine>
<CommentLine> Purpose   : check  that newPos is within possible boundary using pixels</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             newPos - A vector of new positions in pixels 0,0,0 is upper left bottom slice</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function checkForMaximalDisplacementVecPixels(JobName As String, newPos() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>UpdateFormFromJob</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>43</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : UpdateFormFromJob</CommentLine>
<CommentLine> Purpose   : Update the settings of the corresponding Formpage from the Job</CommentLine>
<CommentLine> Variables : Jobs - Contains sevral imaging jobs</CommentLine>
<CommentLine>             JobName - the name of the job where we want to update</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub UpdateFormFromJob(Jobs As ImagingJobs, JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>Jobs</Name>
<Type>ImagingJobs</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateFormFromJobFcs</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : UpdateFormFromJobFcs</CommentLine>
<CommentLine> Purpose   : Update the settings of the corresponding Formpage from the FcsJob</CommentLine>
<CommentLine> Variables : JobsFcs - Contains several fcs jobs</CommentLine>
<CommentLine>             JobName - the name of the job where we want to update</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub UpdateFormFromJobFcs(JobsFcs As FcsJobs, JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobsFcs</Name>
<Type>FcsJobs</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateJobFromForm</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : UpdateJobFromForm</CommentLine>
<CommentLine> Purpose   : Update the settings of imaging Job with JobName from corresponding Formpage</CommentLine>
<CommentLine> Variables : Jobs - Contains sevral imaging jobs</CommentLine>
<CommentLine>             JobName - the name of the job where we want to update</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub UpdateJobFromForm(Jobs As ImagingJobs, JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>Jobs</Name>
<Type>ImagingJobs</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateGuiFromJob</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>58</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : UpdateGuiFromJob</CommentLine>
<CommentLine> Purpose   : Updates the Gui AcquisitionMode from the Job</CommentLine>
<CommentLine> Variables : Jobs - Contains several fcs jobs</CommentLine>
<CommentLine>             JobName - the name of the job where we want to update</CommentLine>
<CommentLine>             ZEN - object is assigned for ZENv &gt; 2010</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub UpdateGuiFromJob(Jobs As ImagingJobs, JobName As String, ZEN As Object)</Declaration>
<Parameters>
<Parameter>
<Name>Jobs</Name>
<Type>ImagingJobs</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>computeShiftedCoordinates</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>51</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : computeShiftedCoordinates</CommentLine>
<CommentLine> Purpose   : given offsetPosition with (0,0,0) center of image central slice (in um)</CommentLine>
<CommentLine>             Computes absolute stage/focus coordinates from currentPosition.</CommentLine>
<CommentLine>             Considers mirror possible mirror of axis</CommentLine>
<CommentLine> Variables : offsetPosition - position in um relative to 0,0,0 center of image and central slice</CommentLine>
<CommentLine>             currentPosiotion -</CommentLine>
<CommentLine> Returns   : new shifted position</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function computeShiftedCoordinates(offsetPosition As Vector, currentPosition As Vector) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>offsetPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>computeCoordinatesImaging</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>51</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : computeCoordinatesImaging</CommentLine>
<CommentLine> Purpose   : compute new stage coordinates for imaging from pixel coordinates</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             currentPosition - stage position in um</CommentLine>
<CommentLine>             newPosition - Vector of positions in pixel (0,0,0) is upper left bottom slice</CommentLine>
<CommentLine> Returns   : stage positions in um!</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function computeCoordinatesImaging(JobName As String, currentPosition As Vector, newPosition() As Vector) As Vector()</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPosition()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>computeCoordinatesFcs</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : computeCoordinatesFcs</CommentLine>
<CommentLine> Purpose   : Compute coordinates for fcs from pixel coordinates</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             currentPosition - stage/focus position in um</CommentLine>
<CommentLine>             newPosition - Vector of positions in pixel (0,0,0) is upper left bottom slice</CommentLine>
<CommentLine> Returns   : stage positions in meter!!! (different from computeCoordinatesImaging which returns in um)</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function computeCoordinatesFcs(JobName As String, currentPosition As Vector, newPosition() As Vector) As Vector()</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPosition()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>runSubImagingJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>116</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : runSubImagingJob</CommentLine>
<CommentLine> Purpose   : create and update a subgrid and eventually decide whether to run Job</CommentLine>
<CommentLine> Variables : GridName - Name of grid where to execute job</CommentLine>
<CommentLine>             JobName -</CommentLine>
<CommentLine>             newPositions - Array of stage/focus positions (in um)</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function runSubImagingJob(GridName As String, JobName As String, newPositions() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>GridName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPositions()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ComputeJobSequential</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>188</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ComputeJobSequential</CommentLine>
<CommentLine> Purpose   : Wait for image analysis and perform a specific task.</CommentLine>
<CommentLine> Variables : parent variables define Job and grid from which one comes</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function ComputeJobSequential(parentJob As String, parentGrid As String, parentPosition As Vector, parentPath As String, parentFile As String, RecordingDoc As DsRecordingDoc, Optional deltaZ As Integer = -1) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>parentJob</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>parentGrid</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>parentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>parentPath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>parentFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>deltaZ</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : JobsManager</CommentLine>
<CommentLine> Author    : Antonio Politi</CommentLine>
<CommentLine> Date      : 29/08/2013</CommentLine>
<CommentLine> Purpose   : Functions to perform imaging and fcs using the Imging, Fcs, Grid, repetitions classes. The functions</CommentLine>
<CommentLine>             also access the form AutofocusForm using the same name identifier for the jobs</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>AJob</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>AJob</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>27</CountOfDeclarationLines>
<CountOfLines>497</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>AcquireTrack</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get AcquireTrack() As Boolean()</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean()</ReturnType>
</Procedure>
<Procedure>
<Name>AcquireTrack</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let AcquireTrack(Value() As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Value()</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> setJob load settings from recording/ZEN into macro</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setJob(RecordingLoc As DsRecording, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingLoc</Name>
<Type>DsRecording</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>putJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>77</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> putJob put settings from Me.recording into ZEN</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function putJob(ZEN As Object)</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setAcquireTrack</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setAcquireTrack(iTrack As Integer, Value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>iTrack</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>isAcquiring</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isAcquiring() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getAcquireTrack</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getAcquireTrack(iTrack As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>iTrack</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ReDimAcquireTrack</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ReDimAcquireTrack(Value As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetRecording</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetRecording() As DsRecording</Declaration>
<Parameters>
</Parameters>
<ReturnType>DsRecording</ReturnType>
</Procedure>
<Procedure>
<Name>SetRecording</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SetRecording(Value As DsRecording)</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>DsRecording</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>isBleaching</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isBleaching() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isZStack</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isZStack() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setRoiMaxNr</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setRoiMaxNr(roiMaxNr As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>roiMaxNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getRoiMaxNr</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRoiMaxNr() As Integer</Declaration>
<Parameters>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>clearRois</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub clearRois()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setRoi</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> load Roi from ARoi inti class</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setRoi(ARoi As Roi, roiNr As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>ARoi</Name>
<Type>Roi</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>roiNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setRois</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> load Rois into class</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setRois(RoisIn() As Roi)</Declaration>
<Parameters>
<Parameter>
<Name>RoisIn()</Name>
<Type>Roi</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getRoi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> getRoi: returns a Roi</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getRoi(roiNr As Integer) As Roi</Declaration>
<Parameters>
<Parameter>
<Name>roiNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Roi</ReturnType>
</Procedure>
<Procedure>
<Name>setRoiFromZen</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> gets Roi directly from ZEN and save it. This is only used at the beginning</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setRoiFromZen() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>createRois</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function createRois() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>62</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptor() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>splittedJobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> split a String into two different Strigs depending on their maximal length</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function splittedJobDescriptor(MaxLines As Integer, jobDescription As String) As String()</Declaration>
<Parameters>
<Parameter>
<Name>MaxLines</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>jobDescription</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String()</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptorSettings</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> create a String to save of the &quot;complete&quot; job desriptin</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptorSettings() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>testDescriptor</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub testDescriptor()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>consistencyDescriptor</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function consistencyDescriptor(Descriptor As String)</Declaration>
<Parameters>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>changeJobFromDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>53</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> change a job from a descriptor</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function changeJobFromDescriptor(Descriptor As String, Value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   AJob stores the parameters for a imaging job</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>AutofocusFormSaveLoad</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>AutofocusFormSaveLoad</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>243</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>SaveFormSettings</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>67</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   SaveSettings(FileName As String)</CommentLine>
<CommentLine>   SaveSettings of the UserForm AutofocusForm in file name FileName.</CommentLine>
<CommentLine>   Name should correspond exactly to name used in Form</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub SaveFormSettings(FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SaveFormPage</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>47</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> SavePage(JobName As String, iFileNum As Integer)</CommentLine>
<CommentLine>   Save page of specific JobName using a file specified by iFuleNum</CommentLine>
<CommentLine>   TODO: Control that indeed iFileNum is a file</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub SaveFormPage(JobName As String, iFileNum As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iFileNum</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ControlTipText</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ControlTipText()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobControlTipText</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Sets tip text for all pages</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub JobControlTipText(JobName As String)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SaveFormFcsPage</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Save page of specific JobFcs using a file specified by iFuleNum</CommentLine>
<CommentLine>   TODO: Control that indeed iFileNum is a file</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub SaveFormFcsPage(JobName As String, iFileNum As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>iFileNum</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>LoadFormSettings</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   LoadSettings(FileName As String)</CommentLine>
<CommentLine>   LoadSettings of Form from FileName</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub LoadFormSettings(FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Module contains functions to save and load Form settings from file</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>ARepetition</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ARepetition</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>70</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>nextRep</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Update index of Repetition and store timeStart</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function nextRep() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>updateTimeStart</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub updateTimeStart()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>thisSuffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisSuffix() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>suffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function suffix(Value As Integer) As String</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>wait</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Calculate that remains to wait</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function wait() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>initialize</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Constructor initialize the class</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function initialize(repetitionName As String, RepetitionTime As Double, RepetitionNumber As Integer, RepetitionInterval As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>repetitionName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionTime</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionNumber</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionInterval</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> A Class to manage repetitions</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>ImagingRepetitions</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ImagingRepetitions</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>153</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>MsgNoRepetition</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub MsgNoRepetition(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>checkRepetitionNames</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function checkRepetitionNames(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Initialize a series of RepetitionJobs with given name</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initialize(Names() As String, RepetitionTimes() As Double, RepetitionNumbers() As Integer, RepetitionIntervals() As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Names()</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionTimes()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionNumbers()</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionIntervals()</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddRepetition</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Initialize a series of RepetitionJobs with given name</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub AddRepetition(Name As String, RepetitionTime As Double, RepetitionNumber As Integer, RepetitionInterval As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionTime</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionNumber</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionInterval</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>  Get current index of repetition</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getIndex(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>reset</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Reset everything to new values</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function reset(Name As String, RepetitionTime As Double, RepetitionNumber As Integer, RepetitionInterval As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionTime</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionNumber</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionInterval</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>resetIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Just reset the index</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function resetIndex(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>update</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Update setting of Job</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function update(Name As String, RepetitionTime As Double, RepetitionNumber As Integer, RepetitionInterval As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionTime</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionNumber</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionInterval</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>nextRep</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Switch to new Repetition</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function nextRep(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>wait</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Compute waiting time</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function wait(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>updateTimeStart</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Check if new timeStart</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub updateTimeStart(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setInterval</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setInterval(Name As String, Value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>thisIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisIndex(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>setRepetitionTime</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setRepetitionTime(Name As String, Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setRepetitionNumber</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>set the number of repetitions</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setRepetitionNumber(Name As String, Value As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getRepetitionNumber</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>get the number of repetitions</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getRepetitionNumber(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>thisSuffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisSuffix(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>suffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function suffix(Name As String, Value As Integer) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> class to manage several ARepetition</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>AGrid</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>AGrid</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>34</CountOfDeclarationLines>
<CountOfLines>892</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Initialize the dimensions of the array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initialize(Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>initializeToZero</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Reset array to empty array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initializeToZero()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>updateGridSizePreserve</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Redimension the array and preserve size</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub updateGridSizePreserve(Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>isGridEmpty</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isGridEmpty() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>correctIndeces</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Check if indeces are in the allowable range</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Function correctIndeces(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>thisSuffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> suffix is WxxxxPxxxx created at current position of grid</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function thisSuffix() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>thisSuffixWell</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Suffix without subposition indication</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function thisSuffixWell() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>suffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Suffix given a Row, Col etc.</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function suffix(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getThisName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisName() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getName(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>setThisName</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisName(Value As String)</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setName</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setName(Value As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getIndeces(Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function setIndeces(Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisPt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   get/set current grid position</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub getThisPt(pos As Vector, Valid As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisX() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getThisY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisY() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getThisZ</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisZ() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getThisValid</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisValid() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setThisPt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisPt(pos As Vector, Valid As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisX</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisX(Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisY(Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisZ</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisZ(Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisValid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisValid(Value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getPt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   get/set position defined by Row, Colm RowSub and ColSub</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub getPt(pos As Vector, Valid As Boolean, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getNrPts</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> get nr of points in grid</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getNrPts() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getNrValidPts</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   get nr of valid points in grid</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getNrValidPts() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getX(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getY(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getZ</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getZ(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getValid</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getValid(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setPt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setPt(pos As Vector, Valid As Boolean, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setX</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setX(X As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>X</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setY(Y As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Y</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setZ</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setZ(Z As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setValid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setValid(Valid As Boolean, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setAllValid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine> All points are true as default</CommentLine>
</CommentLines>
<Declaration>Public Sub setAllValid(Valid As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>nextGridPt</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Go to next gridPt according to meandering. True if there is a next grid pt. False if Grid has reached an end</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function nextGridPt() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>makeGridFromOnePt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>44</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   makeGridFromOnePt( pos As Vector, posGridY() As Double, posGridXY_valid() )</CommentLine>
<CommentLine>   Create a Grid and a Subgrid use using  pos as starting coordinates</CommentLine>
<CommentLine>       dX, dY:         Gridspacing main Grid. The main grid is the center of the subgrid</CommentLine>
<CommentLine>       dXsub, dYsub:   Gridspacing subGrid</CommentLine>
<CommentLine>       refRow:         reference row where main grid starts</CommentLine>
<CommentLine>       refCol:         reference column where main grid starts</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub makeGridFromOnePt(pos As Vector, Row As Long, Col As Long, RowSub As Long, ColSub As Long, dRow As Double, dCol As Double, dRowSub As Double, dColSub As Double, Optional refRow As Integer = 1, Optional refCol As Integer = 1)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dRow</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dCol</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dRowSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dColSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>refRow</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
<Parameter>
<Name>refCol</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>makeGridFromManyPts</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   makeGridFromManyPts(X() As Double, Y() As Double, Z() As Double, dXsub As Double, dYsub As Double  )</CommentLine>
<CommentLine>   Create a Grid and a Subgrid use using X, Y and Z as coordinates for the main grid. A row corresponds to</CommentLine>
<CommentLine>   Y movement and Column to X shift\</CommentLine>
<CommentLine>       X, Y, Z:        Array containing coordinates of main grid.</CommentLine>
<CommentLine>       dXsub, dYsub:   Gridspacing subGrid</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub makeGridFromManyPts(pos() As Vector, Row As Long, Col As Long, RowSub As Long, ColSub As Long, dColSub As Double, dRowSub As Double)</Declaration>
<Parameters>
<Parameter>
<Name>pos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dColSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dRowSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>isPositionGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> isPositionGridFile</CommentLine>
<CommentLine> Check that entries of first line correspond to 4 specified values</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function isPositionGridFile(ByVal sFile As String, ByVal Row As Integer, ByVal Col As Integer, ByVal RowSub As Integer, ByVal ColSub As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>loadPositionGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>57</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> loadPositionGridFile(ByVal sFile As String)</CommentLine>
<CommentLine>       [sFile] In  - Output file name</CommentLine>
<CommentLine>   Function loads a file and write entries in Double arrays. First entry of file is structure of grid</CommentLine>
<CommentLine>   Format is Me.numRow numCol numRowSub numColSub</CommentLine>
<CommentLine>   X Y Z X Y Z X Y Z etc</CommentLine>
<CommentLine>   This is not working!!!</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function loadPositionGridFile(ByVal sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>writePositionGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   writePositionGridFile (ByVal sFile As String)</CommentLine>
<CommentLine>       [sFile] In  - Output file name</CommentLine>
<CommentLine>   Write out position of grid. The first uncommented line is the structure of the grid. Comments are preceeded by %</CommentLine>
<CommentLine>   Format is</CommentLine>
<CommentLine>   numRow numCol numRowSub numColSub</CommentLine>
<CommentLine>   X Y Z X Y Z X Y Z etc</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function writePositionGridFile(ByVal sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isValidGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>60</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Check if file has a validGrid default format</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function isValidGridFile(ByVal sFile As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>loadValidGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>72</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   need to be updated</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function loadValidGridFile(ByVal sFile As String, format As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>format</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>writeValidGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function writeValidGridFile(ByVal sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Class for creating and administrating a grid</CommentLine>
<CommentLine> The positions and subpositions are numbered starting from 1</CommentLine>
<CommentLine> A grid defines positions travelled with the stage for imaging</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>ImagingGrids</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ImagingGrids</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>7</CountOfDeclarationLines>
<CountOfLines>401</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>MsgNoGrid</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub MsgNoGrid(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Create a set of grids with specified names. The default size is 0,0,0,0</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initialize(Names() As String)</Declaration>
<Parameters>
<Parameter>
<Name>Names()</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddGrid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Add a new grid to array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub AddGrid(Name As String, Optional numRow As Long = 0, Optional numCol As Long = 0, Optional numRowSub As Long = 0, Optional numColSub As Long = 0)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRow</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>numCol</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>numRowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
<Parameter>
<Name>numColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>checkGridName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function checkGridName(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isGridEmpty</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isGridEmpty(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>updateGridSize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub updateGridSize(Name As String, numRow As Long, numCol As Long, numRowSub As Long, numColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRow</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numCol</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>updateGridSizePreserve</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub updateGridSizePreserve(Name As String, numRow As Long, numCol As Long, numRowSub As Long, numColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRow</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numCol</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>isPositionGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isPositionGridFile(Name As String, ByVal sFile As String, ByVal Row As Integer, ByVal Col As Integer, ByVal RowSub As Integer, ByVal ColSub As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>loadPositionGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function loadPositionGridFile(Name As String, sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>writePositionGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function writePositionGridFile(Name As String, sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isValidGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isValidGridFile(Name As String, ByVal sFile As String, ByVal Row As Long, ByVal Col As Long, ByVal RowSub As Long, ByVal ColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>loadValidGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function loadValidGridFile(Name As String, sFile As String, format As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>format</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function setIndeces(Name As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>nextGridPt</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function nextGridPt(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>thisRow</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisRow(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>thisColumn</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisColumn(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>thisSubRow</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisSubRow(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>thisSubColumn</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisSubColumn(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>getThisPt</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisPt(Name As String, pos As Vector, Valid As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisPt</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function setThisPt(Name As String, pos As Vector, Valid As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getNrPts</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getNrPts(Name As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getNrValidPts</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getNrValidPts(Name As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getPt</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getPt(Name As String, pos As Vector, Valid As Boolean, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setPt</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function setPt(Name As String, pos As Vector, Valid As Boolean, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisX(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setThisX</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisX(Name As String, Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisY(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setThisY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisY(Name As String, Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisZ</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisZ(Name As String) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setThisZ</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisZ(Name As String, Value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisValid</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisValid(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setThisValid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisValid(Name As String, Value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setAllValid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setAllValid(Name As String, Value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getX(Name As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setX</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setX(Name As String, Value As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getY(Name As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setY(Name As String, Value As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getZ</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getZ(Name As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setZ</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setZ(Name As String, Value As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getValid</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getValid(Name As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setValid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setValid(Name As String, Value As Boolean, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>writeValidGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function writeValidGridFile(Name As String, sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>makeGridFromOnePt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub makeGridFromOnePt(Name As String, pos As Vector, Row As Long, Col As Long, RowSub As Long, ColSub As Long, dRow As Double, dCol As Double, dRowSub As Double, dColSub As Double, Optional refRow As Integer = 1, Optional refCol As Integer = 1)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dRow</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dCol</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dRowSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dColSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>refRow</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
<Parameter>
<Name>refCol</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>makeGridFromManyPts</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub makeGridFromManyPts(Name As String, pos() As Vector, Row As Long, Col As Long, RowSub As Long, ColSub As Long, dRowSub As Double, dColSub As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dRowSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dColSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>thisSuffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisSuffix(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>thisSuffixWell</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisSuffixWell(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getThisName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisName(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>setThisName</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisName(Name As String, Value As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getName(Name As String, numRow As Long, numCol As Long, numRowSub As Long, numColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRow</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numCol</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>setName</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setName(Name As String, Value As String, numRow As Long, numCol As Long, numRowSub As Long, numColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRow</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numCol</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>suffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function suffix(Name As String, numRow As Long, numCol As Long, numRowSub As Long, numColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRow</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numCol</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numRowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>numColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>numCol</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function numCol(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>numRow</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function numRow(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>numColSub</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function numColSub(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>numRowSub</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function numRowSub(Name As String) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> A Class to manage several AGrid instances (commodity class in absence of inheritance in VBA)</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>TestFocus</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>TestFocus</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>719</CountOfDeclarationLines>
<CountOfLines>719</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>AFcsJob</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>AFcsJob</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>17</CountOfDeclarationLines>
<CountOfLines>368</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>setJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>Private Filters() As Long</CommentLine>
<CommentLine>Private Channels() As Long</CommentLine>
<CommentLine></CommentLine>
<CommentLine>Private BeamSplitterVis As Long</CommentLine>
<CommentLine>Private BeamSplitterInVis As Long</CommentLine>
<CommentLine>Private IRBlockFilter As Long</CommentLine>
<CommentLine>Private BeamSplitter2 As Long</CommentLine>
<CommentLine>Private EmissionFilterAPD1 As Long</CommentLine>
<CommentLine>Private EmissionFilterAPD2 As Long</CommentLine>
<CommentLine>Private SelectCh1 As Boolean</CommentLine>
<CommentLine>Private SelectCh2 As Boolean</CommentLine>
<CommentLine>Private SelectCh1Ch2 As Boolean</CommentLine>
<CommentLine>Private SelectCh2Ch1 As Boolean</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> setJob(ZEN As Object, ZENv As Integer)</CommentLine>
<CommentLine>   loads FCSJob from ZEN into Macro. Calls respective function</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setJob(ZEN As Object, ZENv As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZENv</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setJobNoAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   reads FCS settings from ZEN into Macro. This command is used for ZENv &lt; 2011</CommentLine>
<CommentLine>   In the absence of ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>   Only stores which laser is active, its transmission and the measurement time and repetitions</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setJobNoAi(ConfigName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ConfigName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setJobAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   loads FCSJob from ZEN into Macro. Uses the GUI (only works for ZENv &gt; 2010)</CommentLine>
<CommentLine>   recquires ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>   force to save the lightpath config. This config can then be reloaded when needed</CommentLine>
<CommentLine>   Save also settings for lasers. It is compatible with putJobNoGui</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setJobAi(ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>putJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> putJob(ZEN As Object, ZENv As Integer)</CommentLine>
<CommentLine>   put stored settings from Macro back into ZEN. Calls respective function depending on ZEN version</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function putJob(ZEN As Object, ZENv As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZENv</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>putJobAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>     Transfers settings from Macro into ZEN using the GUI (ZENv &gt; 2011)</CommentLine>
<CommentLine>     recquires ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>     Complete setting with name LightPathConfig for light path can be uploaded</CommentLine>
<CommentLine>     also the Measurement time etc are stored</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function putJobAi(ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>putJobNoAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> putJobNoGui()</CommentLine>
<CommentLine>   Transfer settings from Macro into ZEN without using the GUI</CommentLine>
<CommentLine>   In the absence of ZEN_Micro_AIM_ApplicationInterface (ZENv &lt;2011) we only save which lasers are on, laser power, and time lapse.</CommentLine>
<CommentLine>   All other settings are not saved and use the</CommentLine>
<CommentLine>   current status</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function putJobNoAi() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptor() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>splittedJobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> split a String into two different Strigs depending on their maximal length</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function splittedJobDescriptor(MaxLines As Integer, jobDescription As String) As String()</Declaration>
<Parameters>
<Parameter>
<Name>MaxLines</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>jobDescription</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String()</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptorSettings</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> create a String to save of the &quot;complete&quot; job desriptin</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptorSettings() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>testDescriptor</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub testDescriptor()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>consistencyDescriptor</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function consistencyDescriptor(Descriptor As String)</Declaration>
<Parameters>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>changeJobFromDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> change a job from a descriptor</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function changeJobFromDescriptor(Descriptor As String, Value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Class for storing FCS job parameters</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Roi</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Roi</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>227</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>populateDic</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub populateDic()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>createRoiTxt</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function createRoiTxt(roiTypeI As Integer, roiAimI As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>roiTypeI</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>roiAimI</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setX</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setX(X() As Double)</Declaration>
<Parameters>
<Parameter>
<Name>X()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setY(Y() As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Y()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getX() As Double()</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double()</ReturnType>
</Procedure>
<Procedure>
<Name>getY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getY() As Double()</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double()</ReturnType>
</Procedure>
<Procedure>
<Name>setRoiFomZen</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setRoiFomZen(roiNr As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>roiNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setRoi</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setRoi(roiType As String, roiAim As String, X() As Double, Y() As Double)</Declaration>
<Parameters>
<Parameter>
<Name>roiType</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>roiAim</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>X()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Y()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ClearVectorElements</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> remove all vector elements</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ClearVectorElements() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>roiConsistency</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>60</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function roiConsistency() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>MakeVectorElement</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Make a Vectorelement (a ROI) to be used for bleaching or imaging</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MakeVectorElement() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>Roi Class</CommentLine>
<CommentLine>Allows to store a Roi check for its consitency and create it</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>OnlineIASettings</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>OnlineIASettings</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>16</CountOfDeclarationLines>
<CountOfLines>562</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>initializeDefault</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>89</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> A set of functions to IN/OUT parameters for Onlineimageanalisys this should be a class!!!</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Set Registry to default values and initiate correct dictionary for standard key values</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initializeDefault()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getSettings</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getSettings(Key As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>Key</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>available_subKey</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function available_subKey(subKey_HowTo As Dictionary) As String</Declaration>
<Parameters>
<Parameter>
<Name>subKey_HowTo</Name>
<Type>Dictionary</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>createKeyReport</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function createKeyReport() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>checkKeyItem</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Check existence of Key and whether Item is consistent with it</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function checkKeyItem(Key As Variant, Value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Key</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>checkSubkey</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function checkSubkey(KeyName As String, Value As Variant, subKey_HowTo As Dictionary) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>KeyName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>subKey_HowTo</Name>
<Type>Dictionary</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>checkExistKeys</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   check if Keys has been initialized</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub checkExistKeys()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>resetRegistry</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Default registry values is always empty</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub resetRegistry()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>readFromRegistry</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ReadOiaSettingsFromRegistry(Settings As Collection, Keys() As String)</CommentLine>
<CommentLine>       Read Registry using the keys stored in Keys and create a new dictionary</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub readFromRegistry()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>readKeyFromRegistry</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ReadOiaSettingsFromRegistry(Settings As Collection, Keys() As String)</CommentLine>
<CommentLine>       Read Registry using the keys stored in Keys and create a new dictionary</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub readKeyFromRegistry(Key As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Key</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>writeToRegistry</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   writeToRegistry()</CommentLine>
<CommentLine>       Write settings with keys defined in Keys to Registry</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub writeToRegistry()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>writeKeyToRegistry</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   writeKeyToRegistry()</CommentLine>
<CommentLine>       Write a specific value in Key of registry</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub writeKeyToRegistry(Key As Variant, Value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Key</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>readFromFile</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ReadOiaSettingsFromFile(Settings As Dictionary, FileName As String)</CommentLine>
<CommentLine>       Read FileName and store key and paramter into Settings</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub readFromFile(FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>writeToFile</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   WriteOiaSettingsToFile(Settings As Dictionary, FileName As String)</CommentLine>
<CommentLine>   Write Settings to file with FileName</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub writeToFile(FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>settingsFileName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Parse FileName to get name of SettingFile</CommentLine>
<CommentLine>   It is assumed that FileName = something_Txxx.lsm</CommentLine>
<CommentLine>   ToDO: better parsing</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function settingsFileName(FileName As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getRois</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>59</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Parse rois from settings</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getRois(Rois() As Roi) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Rois()</Name>
<Type>Roi</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getPositions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>82</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   GetPositionsFromSettings(Settings As Dictionary, StgPos() As Vector) As Boolean</CommentLine>
<CommentLine>   Settings contains all settings for OnlineImageanalysis</CommentLine>
<CommentLine>   StgPos containes the coordinates</CommentLine>
<CommentLine>   StgPos.X, StgPos.Y: defined 0,0 at upper left corner</CommentLine>
<CommentLine>   StgPos.Z: defined 0 for the central slice</CommentLine>
<CommentLine>   units are converted afterwards as it depends on the type of Job (default unit is px)</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getPositions(StgPos() As Vector, currentPosition As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>StgPos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getFcsPositions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>65</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   GetPositionsFromSettings(Settings As Dictionary, StgPos() As Vector) As Boolean</CommentLine>
<CommentLine>   Settings contains all settings for OnlineImageanalysis</CommentLine>
<CommentLine>   StgPos containes the coordinates</CommentLine>
<CommentLine>   StgPos.X, StgPos.Y: defined 0,0 at upper left corner</CommentLine>
<CommentLine>   StgPos.Z: defined 0 for the central slice</CommentLine>
<CommentLine>   units are converted afterwards as it depends on the type of Job (default unit is px)</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getFcsPositions(StgPos() As Vector, currentPosition As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>StgPos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> OiaSettings: A class for Keeping track of settings that can be read from the Registry or from files</CommentLine>
<CommentLine> the seetings are use for the interaction with an external online image analysis program</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Timers</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Timers</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>12</CountOfDeclarationLines>
<CountOfLines>59</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>MsgNoTimer</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub MsgNoTimer(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>addTimer</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub addTimer(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>checkTimerName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function checkTimerName(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>updateTimeStart</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub updateTimeStart(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>wait</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function wait(Name As String, Delay As Double) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Delay</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Timer class</CommentLine>
<CommentLine> A very simple timer that just keeps track of its creation, updateTime and when wait called it display whether a certain time is elapsed or not</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>LogManager</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>UpdateErrorLog</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function UpdateErrorLog(Text As String)</Declaration>
<Parameters>
<Parameter>
<Name>Text</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateLog</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function UpdateLog(Text As String)</Declaration>
<Parameters>
<Parameter>
<Name>Text</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ResetLog</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ResetLog()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>ErrorLogLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>TestFcs</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>TestFcs</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>76</CountOfDeclarationLines>
<CountOfLines>76</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
<CommentLine>Public FcsJob As AFcsJob</CommentLine>
<CommentLine>Public Type FcsJobType</CommentLine>
<CommentLine>    Name As String</CommentLine>
<CommentLine>    LaserActive() As Boolean</CommentLine>
<CommentLine>    BleachActive() As Boolean</CommentLine>
<CommentLine>    LaserTransmission() As Double</CommentLine>
<CommentLine>    BleachTransmission() As Double</CommentLine>
<CommentLine>End Type</CommentLine>
<CommentLine></CommentLine>
<CommentLine></CommentLine>
<CommentLine>Public Sub TestFcsClass()</CommentLine>
<CommentLine>    Set ZEN = Lsm5.CreateObject(&quot;Zeiss.Micro.AIM.ApplicationInterface.ApplicationInterface&quot;)</CommentLine>
<CommentLine>    Dim FcsControl As AimFcsController</CommentLine>
<CommentLine>    Set FcsControl = Fcs</CommentLine>
<CommentLine>    Debug.Print &quot;Channels &quot; &amp; FcsControl.AcquisitionParameters.Channels &apos;.ChannelDetectorA(0)</CommentLine>
<CommentLine>    Debug.Print &quot;Active &quot; &amp; FcsControl.AcquisitionParameters.ChannelEnabled(16) &apos;.ChannelDetectorA(0)</CommentLine>
<CommentLine>    Debug.Print &quot;Category &quot; &amp; FcsControl.AcquisitionParameters.ChannelDetectorA(4)</CommentLine>
<CommentLine>    If FcsJob Is Nothing Then</CommentLine>
<CommentLine>        Set FcsJob = New AFcsJob</CommentLine>
<CommentLine>        FcsJob.setJobNoAi &quot;current&quot;</CommentLine>
<CommentLine>    End If</CommentLine>
<CommentLine>    FcsJob.setJobNoAi &quot;current&quot;</CommentLine>
<CommentLine>    If Not FcsJob.putJobNoAi Then</CommentLine>
<CommentLine>        FcsJob.setJobNoAi &quot;current&quot;</CommentLine>
<CommentLine>    End If</CommentLine>
<CommentLine>    Debug.Print FcsJob.jobDescriptor</CommentLine>
<CommentLine>    &apos;FcsJob.setLightPath</CommentLine>
<CommentLine></CommentLine>
<CommentLine>End Sub</CommentLine>
<CommentLine>Public Sub loadAFcsJob()</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;ZEN2011 or up</CommentLine>
<CommentLine>    Dim FcsData As AimFcsData</CommentLine>
<CommentLine>    Dim ZEN As Zeiss_Micro_AIM_ApplicationInterface.ApplicationInterface</CommentLine>
<CommentLine>    Set ZEN = Application.ApplicationInterface</CommentLine>
<CommentLine>    ZEN.gui.Fcs.LightPath.Lasers.ByIndex = 1 &apos;set 458</CommentLine>
<CommentLine>    ZEN.gui.Fcs.LightPath.Lasers.On.Value = True</CommentLine>
<CommentLine>    &apos;ZEN.gui.Fcs.LightPath.BleachLasers.IsEnabled = True</CommentLine>
<CommentLine>    &apos;ZEN.gui.Fcs.SaveMethod.Save.Execute</CommentLine>
<CommentLine>    NewFcsRecord GlobalFcsRecordingDoc, FcsData, &quot;Test&quot;</CommentLine>
<CommentLine>    Debug.Print ZEN.gui.Fcs.LightPath.Config.CurrentItem</CommentLine>
<CommentLine>    &apos;ZEN.CommandExecute &quot;Fcs.BeamPath.Save&quot;</CommentLine>
<CommentLine>    &apos;ZEN.CommandExecute &quot;SimpleInput.Ok&quot;</CommentLine>
<CommentLine>    Dim FcsControl As AimFcsController</CommentLine>
<CommentLine>    Set FcsControl = Fcs</CommentLine>
<CommentLine>    FcsControl.BeamPathParameters.AttenuatorOn(1) = False</CommentLine>
<CommentLine>    FcsData.DataSet(0).AcquisitionParameters.Copy FcsControl.AcquisitionParameters</CommentLine>
<CommentLine>    FcsData.DataSet(0).AcquisitionParameters.MeasurementTime = 10</CommentLine>
<CommentLine>    &apos;FcsControl.AcquisitionParameters.MeasurementTime = 2</CommentLine>
<CommentLine>    Dim AqPar As AimFcsAcquisitionParameters</CommentLine>
<CommentLine></CommentLine>
<CommentLine>    AqPar.MeasurementTime = 0.1</CommentLine>
<CommentLine></CommentLine>
<CommentLine></CommentLine>
<CommentLine>    &apos;ZEN.gui.Fcs.method.Load &quot;fcs1&quot;</CommentLine>
<CommentLine>    &apos;ZEN.gui.Fcs.BeamPath.Save</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;    starts with 1 this is the acquisition power</CommentLine>
<CommentLine>&apos;    Power = FcsControl.BeamPathParameters.AttenuatorPower(2)</CommentLine>
<CommentLine>&apos;    Power = FcsControl.BeamPathParameters.BleachAttenuatorPower(1)</CommentLine>
<CommentLine>&apos;    FcsControl.BeamPathParameters.AttenuatorOn(1) = False</CommentLine>
<CommentLine>&apos;    Dim FcsControl As AimFcsController</CommentLine>
<CommentLine>&apos;    Set FcsControl = Fcs</CommentLine>
<CommentLine>&apos;    ZEN.GUI.Fcs.LightPath.BleachLasers.ByIndex = 1</CommentLine>
<CommentLine>&apos;    ZEN.GUI.Fcs.LightPath.BleachLasers.Transmission.Value = 0.1</CommentLine>
<CommentLine></CommentLine>
<CommentLine>End Sub</CommentLine>
<CommentLine>&apos;    starts with 1 this is the acquisition power</CommentLine>
<CommentLine>&apos;    Power = FcsControl.BeamPathParameters.AttenuatorPower(2)</CommentLine>
<CommentLine>&apos;    Power = FcsControl.BeamPathParameters.BleachAttenuatorPower(1)</CommentLine>
<CommentLine>&apos;    FcsControl.BeamPathParameters.AttenuatorOn(1) = False</CommentLine>
<CommentLine>&apos;    Dim FcsControl As AimFcsController</CommentLine>
<CommentLine>&apos;    Set FcsControl = Fcs</CommentLine>
<CommentLine>&apos;    ZEN.GUI.Fcs.LightPath.BleachLasers.ByIndex = 1</CommentLine>
<CommentLine>&apos;    ZEN.GUI.Fcs.LightPath.BleachLasers.Transmission.Value = 0.1</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>FcsJobs</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>FcsJobs</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>10</CountOfDeclarationLines>
<CountOfLines>159</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>checkJobName</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function checkJobName(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>MsgNoJob</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub MsgNoJob(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Initialize a series of Jobs with given name</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initialize(Names() As String, ZEN As Object)</Declaration>
<Parameters>
<Parameter>
<Name>Names()</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddJob</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> AddJob</CommentLine>
<CommentLine>   Add Job and increase number of Jobs</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub AddJob(Name As String, ZEN As Object)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Set the job with Name from ZEN</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setJob(Name As String, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setJobNoAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Set the job with Name from ZEN</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setJobNoAi(Name As String, ConfigName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ConfigName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>putJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Put the job with Name from Macro into ZEN</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function putJob(Name As String, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptor(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>splittedJobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function splittedJobDescriptor(Name As String, MaxLines As Integer) As String()</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>MaxLines</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String()</ReturnType>
</Procedure>
<Procedure>
<Name>getLightPathConfig</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getLightPathConfig(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptorSettings</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job to be used as settings</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptorSettings(Name As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>changeJobFromDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function changeJobFromDescriptor(Name As String, Descriptor As String, Value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> A Class to manage several AFcsJob instances(commodity class in absence of inheritance in VBA)</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>MicroscopeIO</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>MicroscopeIO</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>72</CountOfDeclarationLines>
<CountOfLines>1168</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>getVersionNr</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Returns version number (ZEN2010, etc.)</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getVersionNr() As Integer</Declaration>
<Parameters>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>Range</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Range() As Double</CommentLine>
<CommentLine>   Returs maximal range of Objective movement in um</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Range() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>StopAcquisition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Stop all running FCS jobs and imaging jobs</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function StopAcquisition()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ScanToImage</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>45</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   ScanToImage ( RecordingDoc As DsRecordingDoc) As Boolean</CommentLine>
<CommentLine>   scan overwrite the same image, even with several z-slices</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ScanToImage(RecordingDoc As DsRecordingDoc) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ScanToFcs</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Start Fcs Measurment</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ScanToFcs(FcsData As AimFcsData) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Initialize_Controller</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Set the FCS controller and data stuff</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub Initialize_Controller()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>NewRecord</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos; Creates NewRecords&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Creates New DsRecordingDoc and a entry in the experiment Tree (works only with ZENv &gt; 2010)</CommentLine>
<CommentLine>   RecordingDoc [In/Out] - A document. If it exists and ForceCreation = False then only the name will be changed</CommentLine>
<CommentLine>   Name                  - Name of the document (Tab-name)</CommentLine>
<CommentLine>   ForceCreation         - force creation of a new document and entry in the experiment tree</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewRecord(RecordingDoc As DsRecordingDoc, Name As String, Optional ForceCreation As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ForceCreation</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewRecordGui</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Check if document exists and if it is loaded in the GUI. Otherwise creates a new one.</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewRecordGui(RecordingDoc As DsRecordingDoc, Name As String, ZEN As Object, ZENv As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZENv</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewRecordGuiAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>  Check if Name exists in GUI</CommentLine>
<CommentLine>  recquires ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewRecordGuiAi(RecordingDoc As DsRecordingDoc, Name As String, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewFcsRecord</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Create a new FCSData record</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewFcsRecord(RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, Name As String, Optional ForceCreation As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ForceCreation</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CleanFcsData</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Remove all existing Data from FcsData. This is recquired if you want only to save new data</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function CleanFcsData(RecordingDoc As DsRecordingDoc, FcsData As AimFcsData) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewFcsRecordGui</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Check if document exists and if it is loaded in the GUI. Otherwise creates a new one.</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewFcsRecordGui(RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, Name As String, ZEN As Object, ZENv As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZENv</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewFcsRecordGuiAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>  Check if Name exists in GUI</CommentLine>
<CommentLine>  recquires ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewFcsRecordGuiAi(RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, Name As String, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SaveFcsMeasurement</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> SaveFcsMeasurment to File</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SaveFcsMeasurement(FcsData As AimFcsData, FileName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SaveFcsPositionList</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SaveFcsPositionList(sFile As String, positionsPx() As Vector)</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>positionsPx()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SystemVersionOffset</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   SystemVersionOffset()</CommentLine>
<CommentLine>   Calculate an offset added to z-stack changes</CommentLine>
<CommentLine>       [GlobalCorrectionOffset] Global Out - Offset added to shift in zStack</CommentLine>
<CommentLine>   TODO: Do we still need it. Only for Axioskop does the Offset change</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub SystemVersionOffset(Optional Tmp As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Tmp</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FailSafeMoveStageXY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos; &apos; this should move to function</CommentLine>
<CommentLine>   FailSafeMoveStage(Optional Mark As Integer = 0)</CommentLine>
<CommentLine>   Moves stage and wait till it is finished</CommentLine>
<CommentLine>       [x] In - x-position</CommentLine>
<CommentLine>       [y] In - y-position</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function FailSafeMoveStageXY(X As Double, Y As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>X</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Y</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>FailSafeMoveStageZ</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   FailSafeMoveStageZ(z As Double)</CommentLine>
<CommentLine>   Moves focus and wait till it is finished</CommentLine>
<CommentLine>       [z] In - z-position )</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function FailSafeMoveStageZ(Z As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>MoveToNextLocation</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   MoveToNextLocation(Optional Mark As Integer = 0)</CommentLine>
<CommentLine>   Moves to next location as set in the stage (mark)</CommentLine>
<CommentLine>   Default will cycle through all positions sequentially starting from actual position</CommentLine>
<CommentLine>       [Mark] In - Number of position where to move.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MoveToNextLocation(Optional Mark As Integer = 0) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Mark</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>WaitForRecentering</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   WaitForRecentering(Z As Double, Success As Boolean) As Boolean</CommentLine>
<CommentLine>   calls the microscope specific WaitForRecentering</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function WaitForRecentering(Z As Double, Optional Success As Boolean = False, Optional ZENv As Integer = 2011) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>ZENv</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>2011</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>WaitForRecentering2010</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>70</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   WaitForRecentering2010(Z As Double) As Boolean</CommentLine>
<CommentLine>   Helping function to check if after acquisition focus returns to its correct position</CommentLine>
<CommentLine>       [Z] - is value where the central slice should be.</CommentLine>
<CommentLine>   Additional remarks: Lsm5.Hardware.CpFocus.Position is not updated correctly after acquisition (CpFocus needs to return to working position) on the other hand</CommentLine>
<CommentLine>   Lsm5.DsRecording.Sample0Z keeps track correctly of the position</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function WaitForRecentering2010(Z As Double, Optional Success As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>WaitForRecentering2011</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   WaitForRecentering2011(Z As Double, Success As Boolean) As Boolean</CommentLine>
<CommentLine>   Helping function to check if after acquisition focus returns to its correct position</CommentLine>
<CommentLine>       [Z] - is value where the central slice should be.</CommentLine>
<CommentLine>       [Success] - Tells if central slide has been found before maximal number of iterations</CommentLine>
<CommentLine>   Additional remarks: Lsm5.Hardware.CpFocus.Position is not updated correctly after acquisition (CpFocus needs to return to working position) on the other hand</CommentLine>
<CommentLine>   Lsm5.DsRecording.Sample0Z keeps track correctly of the position</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function WaitForRecentering2011(Z As Double, Optional Success As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter_pre</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Recenter(Z As Double)</CommentLine>
<CommentLine>   Sets the central slice. This slice is then maintained even when framespacing is changing.</CommentLine>
<CommentLine>       [Z]     - Absolute position of central slice</CommentLine>
<CommentLine>   position central slice is Z = Lsm5.DsRecording.FrameSpacing * (Lsm5.DsRecording.FramesPerStack - 1) / 2 - Lsm5.DsRecording.Sample0Z + Lsm5.Hardware.CpFocus.Position</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Recenter_pre(Z As Double, Optional Success As Boolean = False, Optional ZENv As Integer = 2011) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>ZENv</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>2011</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter_post</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Recenter_post(Z As Double, Optional Success As Boolean = False, Optional ZENv As Integer = 2011) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>ZENv</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>2011</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Recenter(Z As Double, Optional ZENv As Integer = 2011) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZENv</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>2011</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter2010</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Recenter2010(Z As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter2011</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Recenter2011(Z As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>MassCenter</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>127</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Compute the centerofmass of image stored in RecordingDoc return values according</CommentLine>
<CommentLine>   Use channel with name TrackingChannel</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MassCenter(RecordingDoc As DsRecordingDoc, TrackingChannel As String) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TrackingChannel</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>SaveDsRecordingDoc</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>68</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> SaveDsRecordingDoc(Document As DsRecordingDoc, FileName As String) As Boolean</CommentLine>
<CommentLine> Copied and adapted from MultiTimeSeries macro</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SaveDsRecordingDoc(Document As DsRecordingDoc, FileName As String, FileFormat As enumAimExportFormat) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Document</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileFormat</Name>
<Type>enumAimExportFormat</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>UsedDevices40</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   UsedDevices40(bLSM As Boolean, bLIVE As Boolean, bCamera As Boolean)</CommentLine>
<CommentLine>   Ask which system is the macro runnning on</CommentLine>
<CommentLine>       [bLSM]  In/Out - True if LSM system</CommentLine>
<CommentLine>       [bLive] In/Out - True for LIVE system</CommentLine>
<CommentLine>       [bCamera] In/Out - True if Camera is used</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub UsedDevices40(bLSM As Boolean, bLIVE As Boolean, bCamera As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>bLSM</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bLIVE</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bCamera</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Module with functions for controlling stage, starts and stop scan</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>KeyReport</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>0</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>KeyReportLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Label1</Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>ConstantsTypesWrapperVBA</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ConstantsTypesWrapperVBA</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>100</CountOfDeclarationLines>
<CountOfLines>100</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;CONSTANTS for VBA&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
</Files>
</Project>
