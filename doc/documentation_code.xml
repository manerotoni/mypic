<?xml version="1.0" encoding="Windows-1252" ?>
<?xml-stylesheet type="text/xsl" href="file:///C:\Program Files (x86)\MZTools3VBA\sample.xsl" ?>
<Project>
<Name>MyPiC_ZEN</Name>
<FileName>MyPiC.lvb</FileName>
<PathFileName>C:\Users\toni\Code\AutomatedMicroscopy\VBA_Tools\MyPiC\MyPiC.lvb</PathFileName>
<BuildFileName>MyPiC.DLL</BuildFileName>
<BuildPathFileName>C:\Users\toni\Code\AutomatedMicroscopy\VBA_Tools\MyPiC\MyPiC.DLL</BuildPathFileName>
<Description>Macro for building a pipeline  on Zeiss microscopes running ZEN</Description>
<HelpContextID>0</HelpContextID>
<HelpFile></HelpFile>
<Type>Host Project</Type>
<References>
<Reference>
<Name>VBA</Name>
<FileName>vbe6.dll</FileName>
<PathFileName>c:\program files (x86)\common files\microsoft shared\vba\vba6\vbe6.dll</PathFileName>
<Description>Visual Basic For Applications</Description>
<BuiltIn>True</BuiltIn>
<Guid>{000204EF-0000-0000-C000-000000000046}</Guid>
<Major>4</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Lsm5Vba</Name>
<FileName>lsm5vb~2.dll</FileName>
<PathFileName>c:\zen\lsm5vb~2.dll</PathFileName>
<Description></Description>
<BuiltIn>True</BuiltIn>
<Guid>{B6D10263-90EF-4AD5-A048-AE4BDB587FA8}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>stdole</Name>
<FileName>stdole2.tlb</FileName>
<PathFileName>c:\windows\syswow64\stdole2.tlb</PathFileName>
<Description>OLE Automation</Description>
<BuiltIn>False</BuiltIn>
<Guid>{00020430-0000-0000-C000-000000000046}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MSForms</Name>
<FileName>fm20.dll</FileName>
<PathFileName>c:\windows\system32\fm20.dll</PathFileName>
<Description>Microsoft Forms 2.0 Object Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{0D452EE1-E08F-101A-852E-02608C4D0BB4}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimAcquisitionController40</Name>
<FileName>aimacq~1.dll</FileName>
<PathFileName>c:\zen\aimacq~1.dll</PathFileName>
<Description>AimAcquisitionController 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{9E2D9FF7-ADE8-4EFA-8642-CB74DFD610E6}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimCommonTools40</Name>
<FileName>aimcom~1.dll</FileName>
<PathFileName>c:\zen\aimcom~1.dll</PathFileName>
<Description>AimCommonTools 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{8AA54F74-E1EC-4D51-B86B-4725E56B1566}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimImage40</Name>
<FileName>aimima~1.dll</FileName>
<PathFileName>c:\zen\aimima~1.dll</PathFileName>
<Description>AimImage 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{13A20796-C36E-4A6D-9A0B-D3E8E5175328}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimImageImportExport40</Name>
<FileName>aimimp~1.dll</FileName>
<PathFileName>c:\zen\aimimp~1.dll</PathFileName>
<Description>AimImageImportExport 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{E303A432-7FEA-4615-975D-49D52C4C32A2}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimImageProcessing40</Name>
<FileName>aic696~1.dll</FileName>
<PathFileName>c:\zen\aic696~1.dll</PathFileName>
<Description>AimImageProcessing 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{42016C3F-2359-4B9E-A033-DF9A19CFC869}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>CP</Name>
<FileName>cp5032.dll</FileName>
<PathFileName>c:\zen\cp5032.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{8D9F155E-AA3E-4FF4-86D0-11631D41860D}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>DS45</Name>
<FileName>ds.dll</FileName>
<PathFileName>c:\zen\ds.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{E867D17D-F87A-4BF2-857D-558FBC7D49F8}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>LSMVECTORMATHLib</Name>
<FileName>lsmvec~2.dll</FileName>
<PathFileName>c:\zen\lsmvec~2.dll</PathFileName>
<Description>LsmVectorMath 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{C94B3DA8-A345-4F08-BC2F-51A283DC41A1}</Guid>
<Major>3</Major>
<Minor>2</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Scripting</Name>
<FileName>scrrun.dll</FileName>
<PathFileName>c:\windows\syswow64\scrrun.dll</PathFileName>
<Description>Microsoft Scripting Runtime</Description>
<BuiltIn>False</BuiltIn>
<Guid>{420B2830-E718-11CF-893D-00A0C9054228}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>RichTextLib</Name>
<FileName>richtx32.ocx</FileName>
<PathFileName>c:\windows\syswow64\richtx32.ocx</PathFileName>
<Description>Microsoft Rich Textbox Control 6.0 (SP4)</Description>
<BuiltIn>False</BuiltIn>
<Guid>{3B7C8863-D78F-101B-B9B5-04021C009402}</Guid>
<Major>1</Major>
<Minor>2</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MSComDlg</Name>
<FileName>comdlg32.ocx</FileName>
<PathFileName>c:\windows\syswow64\comdlg32.ocx</PathFileName>
<Description>Microsoft Common Dialog Control 6.0 (SP6)</Description>
<BuiltIn>False</BuiltIn>
<Guid>{F9043C88-F6F2-101A-A3C9-08002B2F49FB}</Guid>
<Major>1</Major>
<Minor>2</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>VBScript_RegExp_55</Name>
<FileName>vbscript.dll\3</FileName>
<PathFileName>c:\windows\syswow64\vbscript.dll\3</PathFileName>
<Description>Microsoft VBScript Regular Expressions 5.5</Description>
<BuiltIn>False</BuiltIn>
<Guid>{3F4DACA7-160D-11D2-A8E9-00104B365C9F}</Guid>
<Major>5</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>Shell32</Name>
<FileName>shell32.dll</FileName>
<PathFileName>c:\windows\syswow64\shell32.dll</PathFileName>
<Description>Microsoft Shell Controls And Automation</Description>
<BuiltIn>False</BuiltIn>
<Guid>{50A7E9B0-70EF-11D1-B75A-00A0C90564FE}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimExperiment40</Name>
<FileName>aimexp~1.dll</FileName>
<PathFileName>c:\zen\aimexp~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{99FB8CE8-387A-437F-B4D8-1B4FFBF3A196}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimFcsController40</Name>
<FileName>aimfcs~1.dll</FileName>
<PathFileName>c:\zen\aimfcs~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{6C0B58A4-D8F9-4173-B07C-F41AE7F6432E}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimFcsData40</Name>
<FileName>aimfcs~3.dll</FileName>
<PathFileName>c:\zen\aimfcs~3.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{4F9E90CA-2366-4DBE-8AAA-6071EAF443D0}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimFcsFile40</Name>
<FileName>ai805e~1.dll</FileName>
<PathFileName>c:\zen\ai805e~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{EEED9502-B222-4118-80E6-73FDE9919540}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimFcsProcessing40</Name>
<FileName>aic7ea~1.dll</FileName>
<PathFileName>c:\zen\aic7ea~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{8328F42F-0A72-4145-A9B4-34BA006196FB}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimViewerGuiServer40</Name>
<FileName>aimvie~1.dll</FileName>
<PathFileName>c:\zen\aimvie~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{7E59F208-9584-4609-8108-1B6DCC4CB40E}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimImageViewer40</Name>
<FileName>ai16e6~1.dll</FileName>
<PathFileName>c:\zen\ai16e6~1.dll</PathFileName>
<Description></Description>
<BuiltIn>False</BuiltIn>
<Guid>{D4135BDF-BD96-4F3E-AA71-22D91F70269B}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimVectorOverlay40</Name>
<FileName>aimvec~1.dll</FileName>
<PathFileName>c:\zen\aimvec~1.dll</PathFileName>
<Description>AimVectorOverlay 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{C73D0443-5899-4ADA-80A5-7A52D15C93CD}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>IWshRuntimeLibrary</Name>
<FileName>wshom.ocx</FileName>
<PathFileName>c:\windows\syswow64\wshom.ocx</PathFileName>
<Description>Windows Script Host Object Model</Description>
<BuiltIn>False</BuiltIn>
<Guid>{F935DC20-1CF0-11D0-ADB9-00C04FD58A0B}</Guid>
<Major>1</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>AimDiagram40</Name>
<FileName>aimdia~2.dll</FileName>
<PathFileName>c:\zen\aimdia~2.dll</PathFileName>
<Description>AimDiagram 4.5 Type Library</Description>
<BuiltIn>False</BuiltIn>
<Guid>{43695773-6E6C-40DC-8035-5FA5BF9283ED}</Guid>
<Major>4</Major>
<Minor>5</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>WLCONTROLSLib</Name>
<FileName>controls.ocx</FileName>
<PathFileName>c:\progra~2\common~1\carlze~1\controls.ocx</PathFileName>
<Description>Controls for LSM5</Description>
<BuiltIn>False</BuiltIn>
<Guid>{8DF506D3-B711-11D0-A379-0020AF394243}</Guid>
<Major>1</Major>
<Minor>9</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MSComCtl2</Name>
<FileName>mscomct2.ocx</FileName>
<PathFileName>c:\windows\syswow64\mscomct2.ocx</PathFileName>
<Description>Microsoft Windows Common Controls-2 6.0 (SP4)</Description>
<BuiltIn>False</BuiltIn>
<Guid>{86CF1D34-0C5F-11D2-A9FC-0000F8754DA1}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
<Reference>
<Name>MSComctlLib</Name>
<FileName>mscomctl.ocx</FileName>
<PathFileName>c:\windows\syswow64\mscomctl.ocx</PathFileName>
<Description>Microsoft Windows Common Controls 6.0 (SP6)</Description>
<BuiltIn>False</BuiltIn>
<Guid>{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}</Guid>
<Major>2</Major>
<Minor>0</Minor>
<Type>TypeLib</Type>
</Reference>
</References>
<Files>
<File>
<Name>LsmVbaDocFile</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>VBADocument</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>LsmVbaDocFile</Value>
</Property>
<Property>
<Name>Version</Name>
<Value>3</Value>
</Property>
<Property>
<Name>Author</Name>
<Value>zjmei</Value>
</Property>
<Property>
<Name>Revision</Name>
<Value>17733</Value>
</Property>
<Property>
<Name>Created</Name>
<Value>13.05.2009 09:14:02</Value>
</Property>
<Property>
<Name>Modified</Name>
<Value>23/01/2018 18:05:20</Value>
</Property>
<Property>
<Name>ModifiedAuthor</Name>
<Value>Antonio Politi</Value>
</Property>
<Property>
<Name>DongleKey</Name>
<Value></Value>
</Property>
<Property>
<Name>EditDongleKey</Name>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>Lsm5VbaDoc_SystemEvent</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
<CommentLine>ProcessEvents EventNr, &quot;&quot;, 0, Param</CommentLine>
</CommentLines>
<Declaration>Private Sub Lsm5VbaDoc_SystemEvent(ByVal EventNr As Long, ByVal Param As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>EventNr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Param</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Lsm5VbaDoc_FullSystemEvent</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
<CommentLine>ProcessEvents EventNr, ObjName, PropertyNr, Param</CommentLine>
</CommentLines>
<Declaration>Private Sub Lsm5VbaDoc_FullSystemEvent(ByVal EventNr As Long, ByVal ObjName As String, ByVal PropertyNr As Long, ByVal Param As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>EventNr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ObjName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>PropertyNr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Param</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>MCUCommands</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>MCUCommands</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>13</CountOfDeclarationLines>
<CountOfLines>314</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>InitializeStageProperties</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub InitializeStageProperties(Optional Tmp As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Tmp</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetStagePositionX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetStagePositionX(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>GetStagePositionY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetStagePositionY(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>SetStagePositionX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SetStagePositionX(PositionMicrons As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>PositionMicrons</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetStagePositionY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SetStagePositionY(PositionMicrons As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>PositionMicrons</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetStageSpeed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function SetStageSpeed(StageSpeed As Double, CANN As Boolean) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>StageSpeed</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SetStageAcceleration</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>-----------------------------------------------------------------------------</CommentLine>
<CommentLine>-----------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Sub SetStageAcceleration(Accelearation As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Accelearation</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetStageAcceleration</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetStageAcceleration(CANN As Boolean) As Long</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>GetStageSpeed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetStageSpeed(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>IsStageBusy</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function IsStageBusy(CANN As Boolean) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetMaximumStageSpeed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetMaximumStageSpeed() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>GetMinimumStageSpeed</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetMinimumStageSpeed() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>StageMoveToPositionX</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function StageMoveToPositionX(PositionMetre As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>PositionMetre</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StageMoveToPositionY</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function StageMoveToPositionY(PositionMetre As Double, CANN As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>PositionMetre</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StageGetPositionX</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function StageGetPositionX(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>StageGetPositionY</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function StageGetPositionY(CANN As Boolean) As Double</Declaration>
<Parameters>
<Parameter>
<Name>CANN</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>SendStageCommand</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub SendStageCommand(command As String)</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SendStageCommandWaitForAnswer</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendStageCommandWaitForAnswer(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SendStageCommandWaitForHexAnswer</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendStageCommandWaitForHexAnswer(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SendCommand</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendCommand(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SendCommandWaitForAnswer</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendCommandWaitForAnswer(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>SendCommandWaitForHexAnswer</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function SendCommandWaitForHexAnswer(command As String) As Long</Declaration>
<Parameters>
<Parameter>
<Name>command</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>NoImageAxisChange</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Function is not used</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub NoImageAxisChange(Optional Tmp As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Tmp</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ImageAxisChange</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Function is not used</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub ImageAxisChange(Optional Tmp As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Tmp</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StageSettings</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   AreStageCoordinateExchanged() As Boolean</CommentLine>
<CommentLine>       Check whether X and Y axis are exchanged and return True if yes.</CommentLine>
<CommentLine>       Todo: Could also return whether axis are mirrored. Intrestingly althouh axes are not mirrored we use -X??</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub StageSettings(MirrorX As Boolean, MirrorY As Boolean, ExchangeXY As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>MirrorX</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>MirrorY</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ExchangeXY</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Module with functions to control the stage not really used may be obsolete?</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>CommonDialogAPI</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>CommonDialogAPI</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>75</CountOfDeclarationLines>
<CountOfLines>156</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>ShowOpen</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ShowOpen(Filter As String, Flags As Long, Optional FileName As String = &quot;&quot;, Optional initDir As String = &quot;&quot;, Optional DialogTitle As String = &quot;Open&quot;) As String</Declaration>
<Parameters>
<Parameter>
<Name>Filter</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Flags</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>initDir</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>DialogTitle</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Open&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>ShowSave</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ShowSave(Filter As String, Flags As Long, FileName As String, Optional initDir As String = &quot;&quot;, Optional DialogTitle As String = &quot;Save As&quot;) As String</Declaration>
<Parameters>
<Parameter>
<Name>Filter</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Flags</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>initDir</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
<Parameter>
<Name>DialogTitle</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;Save As&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FormatUserForm</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>Minimize button for Macro window</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Sub FormatUserForm(UserFormCaption As String)</Declaration>
<Parameters>
<Parameter>
<Name>UserFormCaption</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>CommonDialog allows for openSave file windows to be used</CommentLine>
<CommentLine> From http://www.activevb.de/tipps/vb6tipps/tipp0368.html</CommentLine>
<CommentLine> http://msdn.microsoft.com/en-us/library/ms645524%28VS.85%29.aspx</CommentLine>
<CommentLine>--------- Anfang Modul &quot;Module1&quot; alias Module1.bas ---------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>FileIO</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>FileIO</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>27</CountOfDeclarationLines>
<CountOfLines>206</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>ZeroString</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   ZeroString(NrofZeros As Integer) As String</CommentLine>
<CommentLine>   Returns a string of zeros</CommentLine>
<CommentLine>       [NrofZeros] In - Length of string</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ZeroString(NrofZeros As Integer) As String</Declaration>
<Parameters>
<Parameter>
<Name>NrofZeros</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>Clear_All_Files_And_SubFolders_In_Folder</Name>
<Scope></Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>Delete all files and subfolders</CommentLine>
<CommentLine>Be sure that no file is open in the folder</CommentLine>
</CommentLines>
<Declaration>Sub Clear_All_Files_And_SubFolders_In_Folder(MyPath As String)</Declaration>
<Parameters>
<Parameter>
<Name>MyPath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>appendSep</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Function appendSep(value As String, sep As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>sep</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FileExist</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   FileExist(ByVal Pathname)</CommentLine>
<CommentLine>   Check if file is present or not</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function FileExist(ByVal PathName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>PathName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CheckDir</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> CheckDir</CommentLine>
<CommentLine> Check that directory exists</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function CheckDir(ByVal PathName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>PathName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SafeOpenTextFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Tries to open a file. If already open resume to next command</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SafeOpenTextFile(ByVal PathName As String, ByRef File As TextStream, ByVal FileSystem As FileSystemObject) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>PathName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>File</Name>
<Type>TextStream</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileSystem</Name>
<Type>FileSystemObject</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getRecordingFromImageFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRecordingFromImageFile(PathName As String, ZEN As Object) As DsRecording</Declaration>
<Parameters>
<Parameter>
<Name>PathName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>DsRecording</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> A list of functions to open and write text files, check their existance etc</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>ARepetition</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ARepetition</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>11</CountOfDeclarationLines>
<CountOfLines>70</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>nextRep</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Update index of Repetition and store timeStart</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function nextRep() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>updateTimeStart</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub updateTimeStart()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>thisSuffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function thisSuffix() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>suffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function suffix(value As Integer) As String</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>wait</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Calculate that remains to wait</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function wait() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>initialize</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Constructor initialize the class</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function initialize(repetitionName As String, RepetitionTime As Double, RepetitionNumber As Integer, RepetitionInterval As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>repetitionName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionTime</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionNumber</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RepetitionInterval</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> A Class to manage repetitions</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>AGrid</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>AGrid</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>42</CountOfDeclarationLines>
<CountOfLines>1171</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Initialize the dimensions of the array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initialize(Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>initializeToZero</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Reset array to empty array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initializeToZero()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>updateGridSizePreserve</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Redimension the array and preserve size</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub updateGridSizePreserve(Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>isGridEmpty</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isGridEmpty() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>correctIndeces</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Check if indeces are in the allowable range</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Function correctIndeces(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>wellUpperLeft</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let wellUpperLeft(value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>wellUpperLeft</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get wellUpperLeft() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isRunning</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> set if grid is running or not</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Property Let isRunning(value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>isRunning</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> set if grid is running or not</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Property Get isRunning() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>hasOneGridPoint</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function hasOneGridPoint() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>hasWellsAndSubwells</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function hasWellsAndSubwells() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>thisSuffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> suffix is WxxxxPxxxx created at current position of grid</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function thisSuffix() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>thisSuffixWell</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Suffix without subposition indication</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function thisSuffixWell() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>suffix</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Suffix given a Row, Col etc.</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function suffix(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>setThisFcsName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function setThisFcsName(value As String)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisFcsImage</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function setThisFcsImage(value As String)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisFcsName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisFcsName() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getThisFcsImage</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisFcsImage() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getThisName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisName() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>setThisName</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisName(value As String)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getName(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>setName</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setName(value As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisParentPath</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisParentPath() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>setThisParentPath</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisParentPath(value As String)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getParentPath</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getParentPath(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>setParentPath</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setParentPath(value As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setAllParentPath</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setAllParentPath(value As String)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getIndeces(Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setIndeces</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function setIndeces(Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisPt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   get/set current grid position</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub getThisPt(pos As Vector, valid As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisPosition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisPosition() As Vector</Declaration>
<Parameters>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>getThisX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisX() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getThisY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisY() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getThisZ</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisZ() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getThisValid</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisValid() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setThisPt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisPt(pos As Vector, valid As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisPosition</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisPosition(pos As Vector)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisX</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisX(value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisY(value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisZ</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisZ(value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisFcsPositions</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisFcsPositions(pos() As Vector)</Declaration>
<Parameters>
<Parameter>
<Name>pos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisFcsPositionsPx</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisFcsPositionsPx(pos() As Vector)</Declaration>
<Parameters>
<Parameter>
<Name>pos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getThisFcsPositions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisFcsPositions() As Vector()</Declaration>
<Parameters>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>getThisFcsPositionsPx</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getThisFcsPositionsPx() As Vector()</Declaration>
<Parameters>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>setThisFcsPositionsZOffset</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>ZOffset in meters</CommentLine>
</CommentLines>
<Declaration>Public Sub setThisFcsPositionsZOffset(ZOffset As Double)</Declaration>
<Parameters>
<Parameter>
<Name>ZOffset</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setFcsPositions</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setFcsPositions(pos() As Vector, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>pos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setFcsPositionsPx</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setFcsPositionsPx(pos() As Vector, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>pos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getFcsPositions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getFcsPositions(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Vector()</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>getFcsPositionsPx</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getFcsPositionsPx(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Vector()</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>setFcsPositionsZOffset</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setFcsPositionsZOffset(ZOffset As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>ZOffset</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setThisValid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setThisValid(value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getPt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   get/set position defined by Row, Colm RowSub and ColSub</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub getPt(pos As Vector, valid As Boolean, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getNrPts</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> get nr of points in grid</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getNrPts() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getNrValidPts</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   get nr of valid points in grid</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getNrValidPts() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>getX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getX(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getY(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getZ</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getZ(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>getValid</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getValid(Row As Long, Col As Long, RowSub As Long, ColSub As Long) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setPt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setPt(pos As Vector, valid As Boolean, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setX</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setX(X As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>X</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setY(Y As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Y</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setZ</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setZ(Z As Double, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setValid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setValid(valid As Boolean, Row As Long, Col As Long, RowSub As Long, ColSub As Long)</Declaration>
<Parameters>
<Parameter>
<Name>valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setAllValid</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine> All points are true as default</CommentLine>
</CommentLines>
<Declaration>Public Sub setAllValid(valid As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>valid</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>nextGridPt</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>103</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Go to next gridPt according to meandering. True if there is a next grid pt. False if Grid has reached an end</CommentLine>
<CommentLine> WellFirst changes order of meandering. First Col and Row then Sub</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function nextGridPt(Optional WellFirst As Boolean) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>WellFirst</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>makeGridFromOnePt</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   makeGridFromOnePt( pos As Vector, posGridY() As Double, posGridXY_valid() )</CommentLine>
<CommentLine>   Create a Grid and a Subgrid use using  pos as starting coordinates</CommentLine>
<CommentLine>       dX, dY:         Gridspacing main Grid. The main grid is the upper left corner of subgrid</CommentLine>
<CommentLine>       dXsub, dYsub:   Gridspacing subGrid</CommentLine>
<CommentLine>       refRow:         reference row where main grid starts</CommentLine>
<CommentLine>       refCol:         reference column where main grid starts</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub makeGridFromOnePt(pos As Vector, Row As Long, Col As Long, RowSub As Long, ColSub As Long, dRow As Double, dCol As Double, dRowSub As Double, dColSub As Double, Optional refRow As Integer = 1, Optional refCol As Integer = 1)</Declaration>
<Parameters>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dRow</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dCol</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dRowSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dColSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>refRow</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
<Parameter>
<Name>refCol</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>makeGridFromManyPts</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>47</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   makeGridFromManyPts(X() As Double, Y() As Double, Z() As Double, dXsub As Double, dYsub As Double  )</CommentLine>
<CommentLine>   Create a Grid and a Subgrid use using X, Y and Z as coordinates for the main grid. A row corresponds to</CommentLine>
<CommentLine>   Y movement and Column to X shift\</CommentLine>
<CommentLine>       X, Y, Z:        Array containing coordinates of main grid.</CommentLine>
<CommentLine>       dXsub, dYsub:   Gridspacing subGrid</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub makeGridFromManyPts(pos() As Vector, Row As Long, Col As Long, RowSub As Long, ColSub As Long, dRowSub As Double, dColSub As Double)</Declaration>
<Parameters>
<Parameter>
<Name>pos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dRowSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>dColSub</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getGridDimFromFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getGridDimFromFile(ByVal sFile As String) As Long()</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long()</ReturnType>
</Procedure>
<Procedure>
<Name>isPositionGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> isPositionGridFile</CommentLine>
<CommentLine> Check that entries of first line correspond to 4 specified values</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function isPositionGridFile(ByVal sFile As String, ByVal Row As Integer, ByVal Col As Integer, ByVal RowSub As Integer, ByVal ColSub As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>loadPositionGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>68</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> loadPositionGridFile(ByVal sFile As String)</CommentLine>
<CommentLine>       [sFile] In  - Output file name</CommentLine>
<CommentLine>   Function loads a file and write entries in Double arrays. First entry of file is structure of grid</CommentLine>
<CommentLine>   Format is Me.numRow numCol numRowSub numColSub</CommentLine>
<CommentLine>   X Y Z X Y Z X Y Z etc</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : loadPositionGridFile</CommentLine>
<CommentLine> Author    : LSM User</CommentLine>
<CommentLine> Date      : 02/11/2014</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function loadPositionGridFile(ByVal sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>writePositionGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   writePositionGridFile (ByVal sFile As String)</CommentLine>
<CommentLine>       [sFile] In  - Output file name</CommentLine>
<CommentLine>   Write out position of grid. The first uncommented line is the structure of the grid. Comments are preceeded by %</CommentLine>
<CommentLine>   Format is</CommentLine>
<CommentLine>   numRow numCol numRowSub numColSub</CommentLine>
<CommentLine>   X Y Z X Y Z X Y Z etc</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function writePositionGridFile(ByVal sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isValidGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>61</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Check if file has a validGrid default format</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function isValidGridFile(ByVal sFile As String, Row As Long, Col As Long, RowSub As Long, ColSub As Long) As String</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Row</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Col</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RowSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ColSub</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>loadValidGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>76</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   need to be updated</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function loadValidGridFile(ByVal sFile As String, format As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>format</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>writeValidGridFile</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function writeValidGridFile(ByVal sFile As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Class for creating and administrating a grid</CommentLine>
<CommentLine> The positions and subpositions are numbered starting from 1</CommentLine>
<CommentLine> A grid defines positions travelled with the stage for imaging</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>AFcsJob</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>AFcsJob</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>18</CountOfDeclarationLines>
<CountOfLines>379</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>timeToAcquire</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>Private Filters() As Long</CommentLine>
<CommentLine>Private Channels() As Long</CommentLine>
<CommentLine></CommentLine>
<CommentLine>Private BeamSplitterVis As Long</CommentLine>
<CommentLine>Private BeamSplitterInVis As Long</CommentLine>
<CommentLine>Private IRBlockFilter As Long</CommentLine>
<CommentLine>Private BeamSplitter2 As Long</CommentLine>
<CommentLine>Private EmissionFilterAPD1 As Long</CommentLine>
<CommentLine>Private EmissionFilterAPD2 As Long</CommentLine>
<CommentLine>Private SelectCh1 As Boolean</CommentLine>
<CommentLine>Private SelectCh2 As Boolean</CommentLine>
<CommentLine>Private SelectCh1Ch2 As Boolean</CommentLine>
<CommentLine>Private SelectCh2Ch1 As Boolean</CommentLine>
</CommentLines>
<Declaration>Public Property Get timeToAcquire() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>timeToAcquire</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let timeToAcquire(value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> setJob(ZEN As Object, ZENv As Integer)</CommentLine>
<CommentLine>   loads FCSJob from ZEN into Macro. Calls respective function</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SetJob(ZEN As Object, ZenV As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZenV</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setJobNoAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   reads FCS settings from ZEN into Macro. This command is used for ZENv &lt; 2011</CommentLine>
<CommentLine>   In the absence of ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>   Only stores which laser is active, its transmission and the measurement time and repetitions</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setJobNoAi(ConfigName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ConfigName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setJobAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   loads FCSJob from ZEN into Macro. Uses the GUI (only works for ZENv &gt; 2010)</CommentLine>
<CommentLine>   recquires ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>   force to save the lightpath config. This config can then be reloaded when needed</CommentLine>
<CommentLine>   Save also settings for lasers. It is compatible with putJobNoGui</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setJobAi(ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>PutJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> putJob(ZEN As Object, ZENv As Integer)</CommentLine>
<CommentLine>   put stored settings from Macro back into ZEN. Calls respective function depending on ZEN version</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function PutJob(ZEN As Object, ZenV As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZenV</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>putJobAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>     Transfers settings from Macro into ZEN using the GUI (ZENv &gt; 2011)</CommentLine>
<CommentLine>     recquires ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>     Complete setting with name LightPathConfig for light path can be uploaded</CommentLine>
<CommentLine>     also the Measurement time etc are stored</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function putJobAi(ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>putJobNoAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> putJobNoGui()</CommentLine>
<CommentLine>   Transfer settings from Macro into ZEN without using the GUI</CommentLine>
<CommentLine>   In the absence of ZEN_Micro_AIM_ApplicationInterface (ZENv &lt;2011) we only save which lasers are on, laser power, and time lapse.</CommentLine>
<CommentLine>   All other settings are not saved and use the</CommentLine>
<CommentLine>   current status</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function putJobNoAi() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptor() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>splittedJobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> split a String into two different Strigs depending on their maximal length</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function splittedJobDescriptor(MaxLines As Integer, jobDescription As String) As String()</Declaration>
<Parameters>
<Parameter>
<Name>MaxLines</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>jobDescription</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String()</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptorSettings</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> create a String to save of the &quot;complete&quot; job desriptin</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptorSettings() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>testDescriptor</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub testDescriptor()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>consistencyDescriptor</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function consistencyDescriptor(Descriptor As String)</Declaration>
<Parameters>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>changeJobFromDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> change a job from a descriptor</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function changeJobFromDescriptor(Descriptor As String, value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Class for storing FCS job parameters</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Roi</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Roi</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>12</CountOfDeclarationLines>
<CountOfLines>237</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>populateDic</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub populateDic()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>createRoiTxt</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function createRoiTxt(roiTypeI As Integer, roiAimI As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>roiTypeI</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>roiAimI</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setX</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setX(X() As Double)</Declaration>
<Parameters>
<Parameter>
<Name>X()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setY(Y() As Double)</Declaration>
<Parameters>
<Parameter>
<Name>Y()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getX() As Double()</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double()</ReturnType>
</Procedure>
<Procedure>
<Name>getY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getY() As Double()</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double()</ReturnType>
</Procedure>
<Procedure>
<Name>setRoiFomZen</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setRoiFomZen(roiNr As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>roiNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setRoi</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setRoi(roiType As String, roiAim As String, X() As Double, Y() As Double)</Declaration>
<Parameters>
<Parameter>
<Name>roiType</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>roiAim</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>X()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Y()</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ClearVectorElements</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> remove all vector elements</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ClearVectorElements() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>roiConsistency</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>60</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function roiConsistency() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>MakeVectorElement</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Make a Vectorelement (a ROI) to be used for bleaching or imaging</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MakeVectorElement() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>Roi Class</CommentLine>
<CommentLine>Allows to store a Roi check for its consitency and create it</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>OnlineIASettings</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>OnlineIASettings</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>17</CountOfDeclarationLines>
<CountOfLines>572</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>initializeDefault</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>96</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> A set of functions to IN/OUT parameters for Onlineimageanalisys this should be a class!!!</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> initiate dictionary for standard key values</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub initializeDefault()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getSettings</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> This get settings from stored one not directly from registry</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getSettings(Key As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>Key</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>available_subKey</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function available_subKey(subKey_HowTo As Dictionary) As String</Declaration>
<Parameters>
<Parameter>
<Name>subKey_HowTo</Name>
<Type>Dictionary</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>createKeyReport</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function createKeyReport() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>checkKeyItem</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Check existence of Key and whether Item is consistent with it</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function checkKeyItem(Key As Variant, value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Key</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>checkSubkey</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function checkSubkey(KeyName As String, value As Variant, subKey_HowTo As Dictionary) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>KeyName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>subKey_HowTo</Name>
<Type>Dictionary</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>checkExistKeys</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   check if Keys has been initialized</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub checkExistKeys()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>deleteKeys</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub deleteKeys()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>resetRegistry</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Default registry values is always empty</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub resetRegistry()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>readFromRegistry</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ReadOiaSettingsFromRegistry(Settings As Collection, Keys() As String)</CommentLine>
<CommentLine>       Read Registry using the keys stored in Keys and create a new dictionary</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub readFromRegistry()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>readKeyFromRegistry</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ReadOiaSettingsFromRegistry(Settings As Collection, Keys() As String)</CommentLine>
<CommentLine>       Read Registry using the keys stored in Keys and create a new dictionary</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function readKeyFromRegistry(Key As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>Key</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>writeToRegistry</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   writeToRegistry()</CommentLine>
<CommentLine>       Write settings with keys defined in Keys to Registry</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub writeToRegistry()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>writeKeyToRegistry</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   writeKeyToRegistry()</CommentLine>
<CommentLine>       Write a specific value in Key of registry</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub writeKeyToRegistry(Key As Variant, value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Key</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ReadFromFile</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ReadOiaSettingsFromFile(Settings As Dictionary, FileName As String)</CommentLine>
<CommentLine>       Read FileName and store key and paramter into Settings</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub ReadFromFile(FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>writeToFile</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   WriteOiaSettingsToFile(Settings As Dictionary, FileName As String)</CommentLine>
<CommentLine>   Write Settings to file with FileName</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub writeToFile(FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>settingsFileName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Parse FileName to get name of SettingFile</CommentLine>
<CommentLine>   It is assumed that FileName = something_Txxx.lsm</CommentLine>
<CommentLine>   ToDO: better parsing</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function settingsFileName(FileName As String) As String</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>getRois</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>59</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Parse rois from settings</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getRois(Rois() As roi) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Rois()</Name>
<Type>roi</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getPositions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>67</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   getPositions(stgPos() As Vector, currentPosition As Vector) As Boolean</CommentLine>
<CommentLine>   Read position in pixel from registry</CommentLine>
<CommentLine>   stgPos containes the coordinates</CommentLine>
<CommentLine>   stgPos.X, stgPos.Y: defined 0,0 at upper left corner</CommentLine>
<CommentLine>   stgPos.Z: defined 0 for first slice</CommentLine>
<CommentLine>   units are converted afterwards as it depends on the type of Job (default input unit is px)</CommentLine>
<CommentLine>   currentPosition refers to center of image (changes depending on size of image)</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getPositions(stgPos() As Vector, currentPosition As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>stgPos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getFcsPositions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>65</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   getFcsPositions(StgPos() As Vector) As Boolean</CommentLine>
<CommentLine>   fcsPos array where to load fcsPositions and currentPosition: current stagePosition</CommentLine>
<CommentLine>   fcsPos.X, fcsPos.Y: defined 0,0 at upper left corner</CommentLine>
<CommentLine>   fcsPos.Z: defined 0 for bottom slice</CommentLine>
<CommentLine>   currentPosition should refer to center of the image (this depends on size X, Y and Z for specific job)</CommentLine>
<CommentLine>   units are now in pixels. For Fcs these needs to be converted and placed with respect to center of image!</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getFcsPositions(fcsPos() As Vector, currentPosition As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>fcsPos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> OiaSettings: A class for Keeping track of settings that can be read from the Registry or from files</CommentLine>
<CommentLine> the seetings are use for the interaction with an external online image analysis program</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>KeyReport</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>UserForm_Initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>3</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub UserForm_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>KeyReportLabel2</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
</Controls>
</File>
<File>
<Name>ConstantsTypesWrapperVBA</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>ConstantsTypesWrapperVBA</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>118</CountOfDeclarationLines>
<CountOfLines>118</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;CONSTANTS for VBA&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>PumpForm</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>UserForm_Initialize</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub UserForm_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Change_Settings_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Change_Settings_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Start_Imaging_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Start_Imaging_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UserForm_QueryClose</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Cancel</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CloseMode</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>Label1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Pump time (ms)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Pump_time</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Pump_interval_time</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Label3</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Distance between events (mm)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Pump_interval_distance</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Label4</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Typical 96 well - well distance ~ 9 mm</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Start_Imaging</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Start Imaging</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Change_Settings</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Change  Settings</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label5</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Time between events (min)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Pump_wait</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Label6</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>wait time after pump(ms)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Pump_interval_Jobs</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Label7</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Time interval after job to avoid crashes</Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>AJob</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>AJob</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>25</CountOfDeclarationLines>
<CountOfLines>583</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>timeToAcquire</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get timeToAcquire() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>timeToAcquire</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let timeToAcquire(value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquireTrack</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get AcquireTrack() As Boolean()</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean()</ReturnType>
</Procedure>
<Procedure>
<Name>AcquireTrack</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>8</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let AcquireTrack(value() As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>value()</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> setJob load settings from recording/ZEN into macro</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SetJob(RecordingLoc As DsRecording, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingLoc</Name>
<Type>DsRecording</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>PutJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>62</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> putJob put settings from Me.recording into ZEN</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function PutJob(ZEN As Object, Optional Extensive As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Extensive</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setAcquireTrack</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setAcquireTrack(iTrack As Integer, value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>iTrack</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>isAcquiring</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isAcquiring() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getAcquireTrack</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getAcquireTrack(iTrack As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>iTrack</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ReDimAcquireTrack</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub ReDimAcquireTrack(value As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GetRecording</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function GetRecording() As DsRecording</Declaration>
<Parameters>
</Parameters>
<ReturnType>DsRecording</ReturnType>
</Procedure>
<Procedure>
<Name>SetRecording</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SetRecording(value As DsRecording)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>DsRecording</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>imageSizePx</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> returns size of image in pixels base 0</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function imageSizePx() As Vector</Declaration>
<Parameters>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>imageSize</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> returns size of image in um</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function imageSize() As Vector</Declaration>
<Parameters>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>getCentralPointPx</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> returns position of central point for a Job (base 0)</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getCentralPointPx() As Vector</Declaration>
<Parameters>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>isBleaching</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
<CommentLine>On Error GoTo ExitFun</CommentLine>
</CommentLines>
<Declaration>Public Function isBleaching() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isZStack</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isZStack() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isLineScan</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isLineScan() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setRoiMaxNr</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setRoiMaxNr(roiMaxNr As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>roiMaxNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getRoiMaxNr</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getRoiMaxNr() As Integer</Declaration>
<Parameters>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>clearRois</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub clearRois()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setRoi</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> load Roi from ARoi inti class</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setRoi(ARoi As roi, roiNr As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>ARoi</Name>
<Type>roi</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>roiNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setRois</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> load Rois into class</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub setRois(RoisIn() As roi)</Declaration>
<Parameters>
<Parameter>
<Name>RoisIn()</Name>
<Type>roi</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getRoi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> getRoi: returns a Roi</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getRoi(roiNr As Integer) As roi</Declaration>
<Parameters>
<Parameter>
<Name>roiNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>roi</ReturnType>
</Procedure>
<Procedure>
<Name>setRoiFromZen</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> gets Roi directly from ZEN and save it. This is only used at the beginning</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setRoiFromZen() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>createRois</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function createRois() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>63</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Create a string with the description of a Job</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptor() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>splittedJobDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> split a String into two different Strigs depending on their maximal length</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function splittedJobDescriptor(MaxLines As Integer, jobDescription As String) As String()</Declaration>
<Parameters>
<Parameter>
<Name>MaxLines</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>jobDescription</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String()</ReturnType>
</Procedure>
<Procedure>
<Name>jobDescriptorSettings</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> create a String to save of the &quot;complete&quot; job desription</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function jobDescriptorSettings() As String</Declaration>
<Parameters>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>testDescriptor</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub testDescriptor()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>consistencyDescriptor</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function consistencyDescriptor(Descriptor As String)</Declaration>
<Parameters>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>changeJobFromDescriptor</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>68</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> change a job from a descriptor</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function changeJobFromDescriptor(Descriptor As String, value As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>Descriptor</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   AJob stores the parameters for a imaging job</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>LogManager</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>83</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>UserForm_Initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub UserForm_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateErrorLog</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function UpdateErrorLog(Text As String)</Declaration>
<Parameters>
<Parameter>
<Name>Text</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateWarningLog</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function UpdateWarningLog(Text As String)</Declaration>
<Parameters>
<Parameter>
<Name>Text</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateLog</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function UpdateLog(Text As String, Optional Level As Integer = 0)</Declaration>
<Parameters>
<Parameter>
<Name>Text</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Level</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ResetLog</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ResetLog()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>ErrorLogLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>CreditForm</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Name>ActiveControl</Name>
<Value></Value>
</Property>
<Property>
<Name>BackColor</Name>
<Value>-2147483633</Value>
</Property>
<Property>
<Name>BorderColor</Name>
<Value>-2147483630</Value>
</Property>
<Property>
<Name>BorderStyle</Name>
<Value>0</Value>
</Property>
<Property>
<Name>CanPaste</Name>
<Value>False</Value>
</Property>
<Property>
<Name>CanRedo</Name>
<Value>False</Value>
</Property>
<Property>
<Name>CanUndo</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Cycle</Name>
<Value>0</Value>
</Property>
<Property>
<Name>_Font_Reserved</Name>
<Value></Value>
</Property>
<Property>
<Name>ForeColor</Name>
<Value>-2147483630</Value>
</Property>
<Property>
<Name>InsideHeight</Name>
<Value>195.75</Value>
</Property>
<Property>
<Name>InsideWidth</Name>
<Value>182.25</Value>
</Property>
<Property>
<Name>KeepScrollBarsVisible</Name>
<Value>3</Value>
</Property>
<Property>
<Name>MousePointer</Name>
<Value>0</Value>
</Property>
<Property>
<Name>PictureAlignment</Name>
<Value>2</Value>
</Property>
<Property>
<Name>Picture</Name>
<Value></Value>
</Property>
<Property>
<Name>PictureSizeMode</Name>
<Value>0</Value>
</Property>
<Property>
<Name>PictureTiling</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ScrollBars</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollHeight</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollLeft</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollTop</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollWidth</Name>
<Value>0</Value>
</Property>
<Property>
<Name>SpecialEffect</Name>
<Value>0</Value>
</Property>
<Property>
<Name>VerticalScrollBarSide</Name>
<Value>0</Value>
</Property>
<Property>
<Name>Zoom</Name>
<Value>100</Value>
</Property>
<Property>
<Name>DesignMode</Name>
<Value>-2</Value>
</Property>
<Property>
<Name>ShowToolbox</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ShowGridDots</Name>
<Value>-2</Value>
</Property>
<Property>
<Name>SnapToGrid</Name>
<Value>-2</Value>
</Property>
<Property>
<Name>GridX</Name>
<Value>0</Value>
</Property>
<Property>
<Name>GridY</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DrawBuffer</Name>
<Value>32000</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>CreditForm</Value>
</Property>
<Property>
<Name>Caption</Name>
<Value>PipelineContructor</Value>
</Property>
<Property>
<Name>Left</Name>
<Value>0</Value>
</Property>
<Property>
<Name>Top</Name>
<Value>-2.25</Value>
</Property>
<Property>
<Name>Width</Name>
<Value>186.75</Value>
</Property>
<Property>
<Name>Height</Name>
<Value>216.75</Value>
</Property>
<Property>
<Name>Enabled</Name>
<Value>True</Value>
</Property>
<Property>
<Name>Tag</Name>
<Value></Value>
</Property>
<Property>
<Name>HelpContextID</Name>
<Value>0</Value>
</Property>
<Property>
<Name>WhatsThisButton</Name>
<Value>False</Value>
</Property>
<Property>
<Name>WhatsThisHelp</Name>
<Value>False</Value>
</Property>
<Property>
<Name>RightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>StartUpPosition</Name>
<Value>1</Value>
</Property>
<Property>
<Name>ShowModal</Name>
<Value>True</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>0</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>CloseButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CloseButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>TextBox1</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>CloseButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Close</Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>Timers</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Timers</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>12</CountOfDeclarationLines>
<CountOfLines>57</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>MsgNoTimer</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub MsgNoTimer(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>addTimer</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub addTimer(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>checkTimerName</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function checkTimerName(Name As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>updateTimeStart</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub updateTimeStart(Name As String)</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>wait</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function wait(Name As String, Delay As Double) As Double</Declaration>
<Parameters>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Delay</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Timer class</CommentLine>
<CommentLine> A very simple timer that just keeps track of its creation, updateTime and when wait called it display whether a certain time is elapsed or not</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>Functions</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>Functions</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>16</CountOfDeclarationLines>
<CountOfLines>406</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>ProcessEvents</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ProcessEvents(ByVal EventNr As Long, ByVal ObjName As String, ByVal PropertyNr As Long, ByVal Param As Variant)</Declaration>
<Parameters>
<Parameter>
<Name>EventNr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ObjName</Name>
<Type>String</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>PropertyNr</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Param</Name>
<Type>Variant</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Double2Vector</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos; Vector operations&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos; To do: overload?&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Double2Vector(X As Double, Y As Double, Z As Double) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>X</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Y</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>Vector2Array</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Vector2Array(vec As Vector) As Vector()</Declaration>
<Parameters>
<Parameter>
<Name>vec</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>Vector2Double</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Vector2Double(vec As Vector) As Double()</Declaration>
<Parameters>
<Parameter>
<Name>vec</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double()</ReturnType>
</Procedure>
<Procedure>
<Name>diffVector</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function diffVector(vec1 As Vector, vec2 As Vector) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>vec1</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>vec2</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>sumVector</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function sumVector(vec1 As Vector, vec2 As Vector) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>vec1</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>vec2</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>normVector2D</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function normVector2D(vec As Vector) As Double</Declaration>
<Parameters>
<Parameter>
<Name>vec</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>normVector3D</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function normVector3D(vec As Vector) As Double</Declaration>
<Parameters>
<Parameter>
<Name>vec</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>scaleVector</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function scaleVector(vec As Vector, alpha As Double) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>vec</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>alpha</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>scaleVectorList</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function scaleVectorList(vec() As Vector, alpha As Double) As Vector()</Declaration>
<Parameters>
<Parameter>
<Name>vec()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>alpha</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>VectorList2String</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Create a ; separated string of the elements in a vector list</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function VectorList2String(vec() As Vector, Optional Rnd = 2) As String()</Declaration>
<Parameters>
<Parameter>
<Name>vec()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Rnd</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>2</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String()</ReturnType>
</Procedure>
<Procedure>
<Name>PipelineConstructor_Setup</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;Starts the form</CommentLine>
</CommentLines>
<Declaration>Public Sub PipelineConstructor_Setup()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DisplayProgress</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>   Display progress in bottom labal of AutofocusForm</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub DisplayProgress(Label1 As Label, State As String, Color As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Label1</Name>
<Type>Label</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>State</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Color</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>MoveListboxItem</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Shifts position of element in list</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub MoveListboxItem(List1 As ListBox, CurrentIndex As Integer, newIndex As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>List1</Name>
<Type>ListBox</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CurrentIndex</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newIndex</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>enableFrame</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Set all elements in frame to enabled = value</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub enableFrame(AFrame As Frame, value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>AFrame</Name>
<Type>Frame</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>weightedMean</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> compute a weighted mean of the positiions of an array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function weightedMean(values() As Variant, imin As Long, imax As Long, Optional threshL As Double = 0) As Double</Declaration>
<Parameters>
<Parameter>
<Name>values()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>imin</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>imax</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>threshL</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>Positive</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Set negative values to 0</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Positive(value As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>Min</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Calculate MIN of two values</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Min(value1 As Variant, value2 As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>value1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>MAX</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Calculate MIN of two values</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MAX(value1 As Variant, value2 As Variant) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>value1</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>value2</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>MINA</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Calculate MIN of Array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MINA(values() As Variant, Optional imin As Long) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>values()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>imin</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>MAXA</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Calculate MAX of Array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MAXA(values() As Variant, Optional imax As Long) As Variant</Declaration>
<Parameters>
<Parameter>
<Name>values()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>imax</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant</ReturnType>
</Procedure>
<Procedure>
<Name>isArrayEmpty</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>  isArrayEmpty(parArray As Variant) As Boolean</CommentLine>
<CommentLine>  Returns false if not an array or dynamic array that has not been initialised (ReDim) or has been erased (Erase)</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function isArrayEmpty(parArray As Variant) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>parArray</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isPosArrayEmpty</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>  isArrayEmpty(parArray As Variant) As Boolean</CommentLine>
<CommentLine>  Returns false if not an array or dynamic array that has not been initialised (ReDim) or has been erased (Erase)</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function isPosArrayEmpty(parArray() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>parArray()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>InCollection</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Check if key is in collection</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function InCollection(Col As Collection, Key As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Col</Name>
<Type>Collection</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Key</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>selectedListIndex</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> return index of List entry that has been selected. Return -1 if no entry is selected</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function selectedListIndex(List As ListBox) As Long</Declaration>
<Parameters>
<Parameter>
<Name>List</Name>
<Type>ListBox</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>QuickSort</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>30</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub QuickSort(ByRef Field() As String, ByVal LB As Long, ByVal UB As Long)</Declaration>
<Parameters>
<Parameter>
<Name>Field()</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>LB</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>UB</Name>
<Type>Long</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Some utility functions</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>JobsManager</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>JobsManager</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>87</CountOfDeclarationLines>
<CountOfLines>1447</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>TaskFieldNames</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function TaskFieldNames() As String()</Declaration>
<Parameters>
</Parameters>
<ReturnType>String()</ReturnType>
</Procedure>
<Procedure>
<Name>TaskToArray</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function TaskToArray(tsk As Task) As Variant()</Declaration>
<Parameters>
<Parameter>
<Name>tsk</Name>
<Type>Task</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Variant()</ReturnType>
</Procedure>
<Procedure>
<Name>ArrayToTask</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ArrayToTask(arr() As Variant) As Task</Declaration>
<Parameters>
<Parameter>
<Name>arr()</Name>
<Type>Variant</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Task</ReturnType>
</Procedure>
<Procedure>
<Name>AcquireJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>122</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : AcquireJob</CommentLine>
<CommentLine> Purpose   : Sets and execute an imaging Job</CommentLine>
<CommentLine> Variables : JobName - The name of the Job to execute</CommentLine>
<CommentLine>             RecordingDoc - the dsRecording where image is stored</CommentLine>
<CommentLine>             RocordingName - The name of the recording (also for the GUI)</CommentLine>
<CommentLine>             position - A vector with stage position where to acquire image X, Y, and Z (cental slice) in um</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
<Declaration>Public Function AcquireJob(jobNr As Integer, Job As AJob, RecordingDoc As DsRecordingDoc, RecordingName As String, position As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>jobNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Job</Name>
<Type>AJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>position</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>AcquireFcsJob</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>63</CountOfLines>
<CommentLines>
<CommentLine>&apos;---------------------------------------------------------------------------------------</CommentLine>
<CommentLine>&apos; Procedure : AcquireFcsJob</CommentLine>
<CommentLine>&apos; Purpose   : Sets and execute an FCS Job at specified position</CommentLine>
<CommentLine>&apos; Variables : JobName  -  The name of the Job to execute</CommentLine>
<CommentLine>&apos;             RecordingDoc - the DsRecordingDoc of the Fcs measurements</CommentLine>
<CommentLine>&apos;             FcsData -  the AimFcsData containing the Fcs</CommentLine>
<CommentLine>&apos;             FileName - Name appearing on top of RecordingDoc</CommentLine>
<CommentLine>&apos;             positions -  A vector array with position where to acquire Fcs X, Y (relative to center of image), and Z (absolute). Unit are in meter!!</CommentLine>
<CommentLine>&apos;---------------------------------------------------------------------------------------</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function AcquireFcsJob(jobNr As Integer, Job As AFcsJob, RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, FileName As String, Positions() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>jobNr</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Job</Name>
<Type>AFcsJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Positions()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>TrackOffLine</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : TrackOffLine</CommentLine>
<CommentLine> Purpose   : Compute new positions according to center of mass</CommentLine>
<CommentLine> Variables : JobName - Origin job of image</CommentLine>
<CommentLine>             RecordingDoc - the Recording where image is store</CommentLine>
<CommentLine>             currentPosition - current absolute stage position (in um)</CommentLine>
<CommentLine> Returns   : a new stage position</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function TrackOffLine(tsk As Task, RecordingDoc As DsRecordingDoc, currentPosition As Vector) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>tsk</Name>
<Type>Task</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>ExecuteTask</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>3</CountOfDeclarationLines>
<CountOfLines>156</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function ExecuteTask(indexPl As Integer, indexTsk As Integer, RecordingDoc As DsRecordingDoc, FcsRecordingDoc As DsRecordingDoc, FcsData As AimFcsData, ParentPath As String, stgPos As Vector, Success As Boolean) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>indexPl</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>indexTsk</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsRecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ParentPath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>stgPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>Pause</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Pause()</CommentLine>
<CommentLine>   Function called when ScanPause = True</CommentLine>
<CommentLine>   Checks state and wait for action in Form</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Pause() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>resetStopFlags</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub resetStopFlags(Optional i As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>i</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StartPipeline</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>152</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : StartPipeline</CommentLine>
<CommentLine> Purpose   : Performs imaging/fcs on a grid. Pretty much the whole macro runs through here</CommentLine>
<CommentLine> Variables : GridName -</CommentLine>
<CommentLine>             JobName -</CommentLine>
<CommentLine>             parentPath - Path from where job has been initiated</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function StartPipeline(index As Integer, RecordingDoc As DsRecordingDoc, FcsRecordingDoc As DsRecordingDoc, FcsData As AimFcsData, ParentPath As String, Optional WellFirst As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsRecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ParentPath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>WellFirst</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>waitForPump</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>83</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : waitForPump</CommentLine>
<CommentLine> Purpose   : check if activation of pump is recquired if yes write command to registry</CommentLine>
<CommentLine> Variables:</CommentLine>
<CommentLine> Inputs:</CommentLine>
<CommentLine>        timeToPump: time to activate the pump (in ms)</CommentLine>
<CommentLine>        timeToWait: time to wait after pump event (in ms)</CommentLine>
<CommentLine>        lastTimePump: time of last event (in ms): CDbl(GetTickCount) * 0.001</CommentLine>
<CommentLine>        distDiff: a distance (in um)</CommentLine>
<CommentLine>        timeMax: maximal timeDiff over which pump is activated</CommentLine>
<CommentLine>        distmax: maximal distDiff over which pump is activated</CommentLine>
<CommentLine>        maxTimeWaitRegistry: maximal time we wait for registry (sec)</CommentLine>
<CommentLine> Outputs:</CommentLine>
<CommentLine>        updated last time pump was active</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function waitForPump(timeToPump As Double, TimeToWait As Double, lastTimePump As Double, distDiff As Double, timeMax As Double, distMax As Double, maxTimeWaitRegistry As Double) As Double</Declaration>
<Parameters>
<Parameter>
<Name>timeToPump</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TimeToWait</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>lastTimePump</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>distDiff</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>timeMax</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>distMax</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>maxTimeWaitRegistry</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>FileNameFromPipeline</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> make name of file from pipeline and task</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Function FileNameFromPipeline(indexPl As Integer, indexTask As Integer) As String</Declaration>
<Parameters>
<Parameter>
<Name>indexPl</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>indexTask</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>FilePathSuffixFromPipeline</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function FilePathSuffixFromPipeline(indexPl As Integer) As String</Declaration>
<Parameters>
<Parameter>
<Name>indexPl</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>String</ReturnType>
</Procedure>
<Procedure>
<Name>checkForMaximalDisplacement</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : checkForMaximalDisplacement</CommentLine>
<CommentLine> Purpose   : check  that newPos is not further away than the size of the image. In fact it should be half the image</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             currentPos - stage position in um</CommentLine>
<CommentLine>             newPos - new stage position in um</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function checkForMaximalDisplacement(IJob As AJob, currentPos As Vector, newPos As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>IJob</Name>
<Type>AJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>checkForMaximalDisplacementVec</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : checkForMaximalDisplacementVec</CommentLine>
<CommentLine> Purpose   : check  that newPos vectors are not further away than the size of the image</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             currentPos - stage position in um</CommentLine>
<CommentLine>             newPos - vector of stage positions in um</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function checkForMaximalDisplacementVec(IJob As AJob, currentPos As Vector, newPos() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>IJob</Name>
<Type>AJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>checkForMaximalDisplacementPixels</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>63</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : checkForMaximalDisplacementPixels</CommentLine>
<CommentLine> Purpose   : check  that newPos is within possible boundary using pixels</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             newPos - A new position in pixels 0,0,0 is upper left bottom slice</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function checkForMaximalDisplacementPixels(IJob As AJob, newPos As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>IJob</Name>
<Type>AJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>checkForMaximalDisplacementVecPixels</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : checkForMaximalDisplacementVecPixels</CommentLine>
<CommentLine> Purpose   : check  that newPos is within possible boundary using pixels</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             newPos - A vector of new positions in pixels 0,0,0 is upper left bottom slice</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Private Function checkForMaximalDisplacementVecPixels(IJob As AJob, newPos() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>IJob</Name>
<Type>AJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>computeShiftedCoordinates</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>52</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : computeShiftedCoordinates</CommentLine>
<CommentLine> Purpose   : given offsetPosition with (0,0,0) center of image central slice (in um)</CommentLine>
<CommentLine>             Computes absolute stage/focus coordinates from currentPosition.</CommentLine>
<CommentLine>             Considers mirror possible mirror of axis</CommentLine>
<CommentLine> Variables : offsetPosition - position in um relative to 0,0,0 center of image and central slice</CommentLine>
<CommentLine>             currentPosiotion -</CommentLine>
<CommentLine> Returns   : new shifted position</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function computeShiftedCoordinates(offsetPosition As Vector, currentPosition As Vector) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>offsetPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>computeCoordinatesImaging</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : computeCoordinatesImaging</CommentLine>
<CommentLine> Purpose   : compute new stage coordinates for imaging from pixel coordinates</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             currentPosition - stage position in um</CommentLine>
<CommentLine>             newPosition - Vector of positions in pixel (0,0,0) is upper left bottom slice</CommentLine>
<CommentLine> Returns   : stage positions in um!</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function computeCoordinatesImaging(IJob As AJob, currentPosition As Vector, newPosition() As Vector) As Vector()</Declaration>
<Parameters>
<Parameter>
<Name>IJob</Name>
<Type>AJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPosition()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>computeCoordinatesFcs</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : computeCoordinatesFcs</CommentLine>
<CommentLine> Purpose   : Compute coordinates for fcs from pixel coordinates</CommentLine>
<CommentLine> Variables : JobName -</CommentLine>
<CommentLine>             currentPosition - stage/focus position in um</CommentLine>
<CommentLine>             newPosition - Vector of positions in pixel (0,0,0) is upper left bottom slice</CommentLine>
<CommentLine> Returns   : stage positions in meter!!! (different from computeCoordinatesImaging which returns in um)</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function computeCoordinatesFcs(IJob As AJob, currentPosition As Vector, newPosition() As Vector) As Vector()</Declaration>
<Parameters>
<Parameter>
<Name>IJob</Name>
<Type>AJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>currentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPosition()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>updateSubPipelineGrid</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : runSubImagingJob</CommentLine>
<CommentLine> Purpose   : create and update a subgrid and eventually decide whether to run Job</CommentLine>
<CommentLine> Variables : GridName - Name of grid where to execute job</CommentLine>
<CommentLine>             JobName -</CommentLine>
<CommentLine>             newPositions - Array of stage/focus positions (in um)</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function updateSubPipelineGrid(index As Integer, newPositions() As Vector, fcsPos() As Vector, fcsPosPx() As Vector, prefix As String, Optional ParentPath As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>newPositions()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>fcsPos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>fcsPosPx()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>prefix</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ParentPath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>runSubPipeline</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function runSubPipeline(index As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ComputeJobSequential</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>2</CountOfDeclarationLines>
<CountOfLines>224</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : ComputeJobSequential</CommentLine>
<CommentLine> Purpose   : Wait for image analysis and perform a specific task.</CommentLine>
<CommentLine> Variables : parent variables define Job and grid from which one comes</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function ComputeJobSequential(indexPl As Integer, indexTsk As Integer, parentPosition As Vector, ParentPath As String, parentFile As String, RecordingDoc As DsRecordingDoc) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>indexPl</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>indexTsk</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>parentPosition</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ParentPath</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>parentFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : JobsManager</CommentLine>
<CommentLine> Author    : Antonio Politi</CommentLine>
<CommentLine> Date      : 29/08/2013</CommentLine>
<CommentLine> Purpose   : Functions to perform imaging and fcs using the Imging, Fcs, Grid, repetitions classes. The functions</CommentLine>
<CommentLine>             also access the form AutofocusForm using the same name identifier for the jobs</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>MicroscopeIO</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>MicroscopeIO</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>74</CountOfDeclarationLines>
<CountOfLines>1671</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>getVersionNr</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Returns version number (ZEN2010, etc.)</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function getVersionNr() As Integer</Declaration>
<Parameters>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>Range</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Range() As Double</CommentLine>
<CommentLine>   Returs maximal range of Objective movement in um</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Range() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>StopAcquisition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Stop all running FCS jobs and imaging jobs</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function StopAcquisition()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ClearVectorElements</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;   remove all vector elements</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ClearVectorElements() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>isReady</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Check if system is busy in some of its actions</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function isReady(Optional Time As Double = 0.1) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Time</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0.1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SleepWithEvents</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Sleep for a certain time and perform DoEvents inbetween. WaitTime is in milliseconds</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub SleepWithEvents(WaitTime As Double)</Declaration>
<Parameters>
<Parameter>
<Name>WaitTime</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ScanToImage</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   ScanToImage (RecordingDoc As DsRecordingDoc) As Boolean</CommentLine>
<CommentLine>   scan overwrite the same image, even with several z-slices</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ScanToImage(RecordingDoc As DsRecordingDoc, Optional TimeOut As Double = -1) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TimeOut</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>ScanToFcs</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Start Fcs Measurment</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ScanToFcs(RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, Optional TimeOut As Double = -1) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TimeOut</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Initialize_Controller</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Set the FCS controller and data stuff</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub Initialize_Controller()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>NewRecord</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos; Creates NewRecords&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Creates New DsRecordingDoc and a entry in the experiment Tree (works only with ZENv &gt; 2010)</CommentLine>
<CommentLine>   RecordingDoc [In/Out] - A document. If it exists and ForceCreation = False then only the name will be changed</CommentLine>
<CommentLine>   Name                  - Name of the document (Tab-name)</CommentLine>
<CommentLine>   ForceCreation         - force creation of a new document and entry in the experiment tree</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewRecord(RecordingDoc As DsRecordingDoc, Name As String, Optional ForceCreation As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ForceCreation</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewRecordGui</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Check if document exists and if it is loaded in the GUI. Otherwise creates a new one.</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewRecordGui(RecordingDoc As DsRecordingDoc, Name As String, ZEN As Object, ZenV As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZenV</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewRecordGuiAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>  Check if Name exists in GUI</CommentLine>
<CommentLine>  recquires ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewRecordGuiAi(RecordingDoc As DsRecordingDoc, Name As String, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewFcsRecord</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>35</CountOfLines>
<CommentLines>
<CommentLine></CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;   Create a new FCSData record</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewFcsRecord(RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, Name As String, Optional ForceCreation As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ForceCreation</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>CleanFcsData</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Remove all existing Data from FcsData. This is recquired if you want only to save new data</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function CleanFcsData(RecordingDoc As DsRecordingDoc, FcsData As AimFcsData) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewFcsRecordGui</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Check if document exists and if it is loaded in the GUI. Otherwise creates a new one.</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewFcsRecordGui(RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, Name As String, ZEN As Object, ZenV As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZenV</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>NewFcsRecordGuiAi</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>  Check if Name exists in GUI</CommentLine>
<CommentLine>  recquires ZEN_Micro_AIM_ApplicationInterface</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function NewFcsRecordGuiAi(RecordingDoc As DsRecordingDoc, FcsData As AimFcsData, Name As String, ZEN As Object) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SaveFcsMeasurement</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> SaveFcsMeasurment to File</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SaveFcsMeasurement(FcsData As AimFcsData, FcsDsDoc As DsRecordingDoc, FileName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>FcsData</Name>
<Type>AimFcsData</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FcsDsDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>SaveFcsPositionList</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>56</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub SaveFcsPositionList(sFile As String, positionsPx() As Vector, imageName As String, classNames() As String)</Declaration>
<Parameters>
<Parameter>
<Name>sFile</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>positionsPx()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>imageName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>classNames()</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SystemVersionOffset</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>39</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   SystemVersionOffset()</CommentLine>
<CommentLine>   Calculate an offset added to z-stack changes</CommentLine>
<CommentLine>       [GlobalCorrectionOffset] Global Out - Offset added to shift in zStack</CommentLine>
<CommentLine>   TODO: Do we still need it. Only for Axioskop does the Offset change</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub SystemVersionOffset(Optional Tmp As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Tmp</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FailSafeMoveStageXY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Moves stage and wait till it is finished. Repeat the process twice if precision is not achieved</CommentLine>
<CommentLine>       [x] In - x-position</CommentLine>
<CommentLine>       [y] In - y-position</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function FailSafeMoveStageXY(X As Double, Y As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>X</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Y</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>FailSafeMoveStageZ</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Wrapper to run with ZBacklash (generally ZBacklash is zero) or not</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function FailSafeMoveStageZ(Z As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>FailSafeMoveStageZExec</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>51</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Moves focus and wait till it is finished</CommentLine>
<CommentLine>       [z] In - z-position in um</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function FailSafeMoveStageZExec(Z As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>MoveToNextLocation</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   MoveToNextLocation(Optional Mark As Integer = 0)</CommentLine>
<CommentLine>   Moves to next location as set in the stage (mark)</CommentLine>
<CommentLine>   Default will cycle through all positions sequentially starting from actual position</CommentLine>
<CommentLine>       [Mark] In - Number of position where to move.</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MoveToNextLocation(Optional Mark As Integer = 0) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Mark</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>0</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getCurrentPosition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getCurrentPosition() As Vector</Declaration>
<Parameters>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>getMarkedStagePosition</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : getMarkedStagePosition</CommentLine>
<CommentLine> Purpose   : get positions in marked stage gui</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Function getMarkedStagePosition() As Vector()</Declaration>
<Parameters>
</Parameters>
<ReturnType>Vector()</ReturnType>
</Procedure>
<Procedure>
<Name>setMarkedStagePosition</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>40</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : setMarkedStagePosition</CommentLine>
<CommentLine> Purpose   : set positions in marked stage gui from Vector pos</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub setMarkedStagePosition(pos() As Vector)</Declaration>
<Parameters>
<Parameter>
<Name>pos()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>WaitForRecentering</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   WaitForRecentering(Z As Double, Success As Boolean) As Boolean</CommentLine>
<CommentLine>   calls the microscope specific WaitForRecentering</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function WaitForRecentering(Z As Double, Optional Success As Boolean = False, Optional ZenV As Integer = 2011, Optional Reset As Boolean) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>ZenV</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>2011</DefaultValue>
</Parameter>
<Parameter>
<Name>Reset</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>WaitForRecentering2010</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   WaitForRecentering2010(Z As Double) As Boolean</CommentLine>
<CommentLine>   Helping function to check if after acquisition focus returns to its correct position</CommentLine>
<CommentLine>       [Z] - is value where the central slice should be.</CommentLine>
<CommentLine>   Additional remarks: Lsm5.Hardware.CpFocus.Position is not updated correctly after acquisition (CpFocus needs to return to working position) on the other hand</CommentLine>
<CommentLine>   Lsm5.DsRecording.Sample0Z keeps track correctly of the position</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function WaitForRecentering2010(Z As Double, Optional Success As Boolean = False, Optional Reset As Boolean = True) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>Reset</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>WaitForRecentering2011</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   WaitForRecentering2011(Z As Double, Success As Boolean) As Boolean</CommentLine>
<CommentLine>   Helping function to check if after acquisition focus returns to its correct position</CommentLine>
<CommentLine>       [Z] - is value where the central slice should be.</CommentLine>
<CommentLine>       [Success] - Tells if central slide has been found before maximal number of iterations</CommentLine>
<CommentLine>   Additional remarks: Lsm5.Hardware.CpFocus.Position is not updated correctly after acquisition (CpFocus needs to return to working position) on the other hand</CommentLine>
<CommentLine>   Lsm5.DsRecording.Sample0Z keeps track correctly of the position</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function WaitForRecentering2011(Z As Double, Optional Success As Boolean = False, Optional Reset As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>Reset</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>WaitForRecentering2011</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>66</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   WaitForRecentering2011(Z As Double, Success As Boolean) As Boolean</CommentLine>
<CommentLine>   Helping function to check if after acquisition focus returns to its correct position</CommentLine>
<CommentLine>       [Z] - is value where the central slice should be.</CommentLine>
<CommentLine>       [Success] - Tells if central slide has been found before maximal number of iterations</CommentLine>
<CommentLine>   Additional remarks: Lsm5.Hardware.CpFocus.Position is not updated correctly after acquisition (CpFocus needs to return to working position) on the other hand</CommentLine>
<CommentLine>   Lsm5.DsRecording.Sample0Z keeps track correctly of the position</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function WaitForRecentering2011(Z As Double, Optional Success As Boolean = False, Optional Reset As Boolean = False) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>Reset</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter_pre</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   Recenter(Z As Double)</CommentLine>
<CommentLine>   Sets the central slice. This slice is then maintained even when framespacing is changing.</CommentLine>
<CommentLine>       [Z]     - Absolute position of central slice</CommentLine>
<CommentLine>   position central slice is Z = Lsm5.DsRecording.FrameSpacing * (Lsm5.DsRecording.FramesPerStack - 1) / 2 - Lsm5.DsRecording.Sample0Z + Lsm5.Hardware.CpFocus.Position</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function Recenter_pre(Z As Double, Optional Success As Boolean = False, Optional ZenV As Integer = 2011) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>ZenV</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>2011</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter_post</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Recenter_post(Z As Double, Optional Success As Boolean = False, Optional ZenV As Integer = 2011, Optional Reset As Boolean = True) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Success</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>False</DefaultValue>
</Parameter>
<Parameter>
<Name>ZenV</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>2011</DefaultValue>
</Parameter>
<Parameter>
<Name>Reset</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>True</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Recenter(Z As Double, Optional ZenV As Integer = 2011) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZenV</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>2011</DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter2011</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>61</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Recenter2011(Z As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter2011</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>61</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Recenter2011(Z As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>Recenter2011</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>61</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function Recenter2011(Z As Double) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Z</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>MassCenter</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>115</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Compute the centerofmass of image stored in RecordingDoc return values according</CommentLine>
<CommentLine>   Use channel with name TrackingChannel</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function MassCenter(RecordingDoc As DsRecordingDoc, TrackingChannel As Integer, method As Integer) As Vector</Declaration>
<Parameters>
<Parameter>
<Name>RecordingDoc</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TrackingChannel</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>method</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Vector</ReturnType>
</Procedure>
<Procedure>
<Name>SaveDsRecordingDoc</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>56</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> SaveDsRecordingDoc(Document As DsRecordingDoc, FileName As String) As Boolean</CommentLine>
<CommentLine> Copied and adapted from MultiTimeSeries macro</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function SaveDsRecordingDoc(Document As DsRecordingDoc, FileName As String, FileFormat As enumAimExportFormat) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Document</Name>
<Type>DsRecordingDoc</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>FileFormat</Name>
<Type>enumAimExportFormat</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>UsedDevices40</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>53</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   UsedDevices40(bLSM As Boolean, bLIVE As Boolean, bCamera As Boolean)</CommentLine>
<CommentLine>   Ask which system is the macro runnning on</CommentLine>
<CommentLine>       [bLSM]  In/Out - True if LSM system</CommentLine>
<CommentLine>       [bLive] In/Out - True for LIVE system</CommentLine>
<CommentLine>       [bCamera] In/Out - True if Camera is used</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub UsedDevices40(bLSM As Boolean, bLIVE As Boolean, bCamera As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>bLSM</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bLIVE</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>bCamera</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Module with functions for controlling stage, starts and stop scan, creating documents and saving images</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>JobSetter</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Value></Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>10</CountOfDeclarationLines>
<CountOfLines>1142</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>EventMng_Ready</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub EventMng_Ready()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>EventMng_Busy</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub EventMng_Busy()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FcsJobList_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub FcsJobList_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UserForm_Initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>52</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub UserForm_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UserForm_QueryClose</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>17</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Cancel</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CloseMode</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquireFcsJobButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>47</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Acquisition buttons     &apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AcquireFcsJobButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquireImgJobButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AcquireImgJobButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquireImgJob</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>28</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Acquire imaging job from ImgJobs array at index</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AcquireImgJob(index As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ChangeImgJobName_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Mange Imaging jobs      &apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub ChangeImgJobName_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ChangeFcsJobName_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub ChangeFcsJobName_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ImgJobList_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub ImgJobList_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddImgJobFromFileButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>58</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AddImgJobFromFileButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddImgJobFromFile</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AddImgJobFromFile(FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SaveButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>71</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub SaveButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StopButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub StopButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StopFcsButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub StopFcsButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Track1_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Track1_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Track2_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Track2_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Track3_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Track3_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>Track4_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub Track4_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setStatus</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Change Status label text &apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub setStatus(value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TrackClick</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Update status of Track number iTrack if it should be acquired or not &apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub TrackClick(iTrack As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>iTrack</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TrackVisible</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>19</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Change Visible Status of Track in GUI &apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub TrackVisible(Visible As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Visible</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetJobButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Read imaging Job from ZEN and import into macro. ZEN-&gt;Macro button&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub SetJobButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetFcsJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Read FCS Job from ZEN and import into macro. ZEN-&gt;Macro button&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub SetFcsJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setLabels</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Update description of imaging job number index in the GUI &apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub setLabels(index As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setFcsLabels</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Update description of fcs job number index in the GUI &apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub setFcsLabels(index As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PutJobButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Upload imaging job from macro into ZEN. Button Macro -&gt; ZEN &apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub PutJobButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PutFcsJob_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Upload FCS job from macro into ZEN. Button Macro -&gt; ZEN &apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub PutFcsJob_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddFcsJobButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>44</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; Add new FCS job to job list. + button &apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AddFcsJobButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UniqueListName</Name>
<Scope>Private</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Function UniqueListName(List As ListBox, JobName As String) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>List</Name>
<Type>ListBox</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>HideShowForms</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>42</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>  HideShowForms: Hide or show different forms stored in OpenForms</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function HideShowForms(OpenForms() As Boolean) As Boolean()</Declaration>
<Parameters>
<Parameter>
<Name>OpenForms()</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean()</ReturnType>
</Procedure>
<Procedure>
<Name>AddJobButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>46</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> AddJobButton_Click: Create a new imaging job from ZEN and add it to list of jobs</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AddJobButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setTrackNames</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>50</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> setTrackNames(index As Integer)</CommentLine>
<CommentLine> Set name of imaging track with number index in GUI. Use data stored in ImgJobs list</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub setTrackNames(index As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateJobListbox</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub UpdateJobListbox(List1 As ListBox, JobArray)</Declaration>
<Parameters>
<Parameter>
<Name>List1</Name>
<Type>ListBox</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>JobArray</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DeleteJobButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> DeleteJobButton_Click()</CommentLine>
<CommentLine>   Remove a Imaging job from Listbox and ImgJobs Array</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub DeleteJobButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddJob</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>45</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> Add imaging job Recording to JobsV with Name at index base 0</CommentLine>
<CommentLine>&apos;</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : AddJob</CommentLine>
<CommentLine> Purpose   : Add imaging job to an array of Jobs</CommentLine>
<CommentLine> Variables :</CommentLine>
<CommentLine>   JobsV()  - An Array of Imaging jobs</CommentLine>
<CommentLine>   Name     - Name of new job</CommentLine>
<CommentLine>   index    - index of new job</CommentLine>
<CommentLine>   Recording - The ZEN imaging settings</CommentLine>
<CommentLine>   ZEN       - A ZEN object (this is for compabilities ZEN2010 and &gt;= 2011</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub AddJob(JobsV() As AJob, Name As String, index As Integer, Recording As DsRecording, ZEN As Object)</Declaration>
<Parameters>
<Parameter>
<Name>JobsV()</Name>
<Type>AJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Recording</Name>
<Type>DsRecording</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddFcsJob</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : AddFcsJob</CommentLine>
<CommentLine> Purpose   : Add FCS job to an array of Jobs</CommentLine>
<CommentLine> Variables :</CommentLine>
<CommentLine>   JobsV()  - An Array of FCS jobs</CommentLine>
<CommentLine>   Name     - Name of new job</CommentLine>
<CommentLine>   index    - index of new job</CommentLine>
<CommentLine>   ZEN       - A ZEN object (this is for compabilities ZEN2010 and &gt;= 2011</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub AddFcsJob(JobsV() As AFcsJob, Name As String, index As Integer, ZEN As Object)</Declaration>
<Parameters>
<Parameter>
<Name>JobsV()</Name>
<Type>AFcsJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>ZEN</Name>
<Type>Object</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DeleteJob</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>48</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Procedure : DeleteJob</CommentLine>
<CommentLine> Purpose   : Delete Job and decrease number of Jobs. Job is found by index. Name</CommentLine>
<CommentLine>             is used to double check the correct job</CommentLine>
<CommentLine> Variables :</CommentLine>
<CommentLine>   JobsV()  - An Array of imaging jobs</CommentLine>
<CommentLine>   index    - index of job to delete</CommentLine>
<CommentLine>   Name     - Name of job to delete</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine></CommentLine>
</CommentLines>
<Declaration>Public Sub DeleteJob(JobsV() As AJob, index As Integer, Optional Name As String = &quot;&quot;)</Declaration>
<Parameters>
<Parameter>
<Name>JobsV()</Name>
<Type>AJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DeleteFcsJobButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub DeleteFcsJobButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DeleteFcsJob</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub DeleteFcsJob(JobsV() As AFcsJob, index As Integer, Optional Name As String = &quot;&quot;)</Declaration>
<Parameters>
<Parameter>
<Name>JobsV()</Name>
<Type>AFcsJob</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Name</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>&quot;&quot;</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
<CommentLine> Module    : JobSetter</CommentLine>
<CommentLine> Author    : Antonio Politi</CommentLine>
<CommentLine> Date      : 23/10/2017</CommentLine>
<CommentLine> Purpose   :</CommentLine>
<CommentLine>---------------------------------------------------------------------------------------</CommentLine>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>JobSetterMultipage</Name>
<ProgId>MSForms.MultiPage</ProgId>
<ClassName>MultiPage</ClassName>
</Control>
<Control>
<Name>Frame2</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Available Imaging Jobs</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ImgJobList</Name>
<ProgId>MSForms.ListBox</ProgId>
<ClassName>ListBox</ClassName>
</Control>
<Control>
<Name>AddJobButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>DeleteJobButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>X</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PutJobButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Macro -&gt; ZEN</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>SetJobButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>ZEN -&gt; Macro</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquireImgJobButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StopButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame4</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Job Tracks</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Track1</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Track2</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track2</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Track3</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track3</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Track4</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track4</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame3</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Job description</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>JobLabel1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Label1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>JobLabel2</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Label1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquireFcsJobButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StopFcsButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PutFcsJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Macro -&gt; ZEN</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>SetFcsJob</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>ZEN -&gt; Macro</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Frame5</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Available Fcs Jobs</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FcsJobList</Name>
<ProgId>MSForms.ListBox</ProgId>
<ClassName>ListBox</ClassName>
</Control>
<Control>
<Name>Frame7</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Job description</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FcsJobLabel1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Label1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FcsJobLabel2</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Label1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AddImgJobFromFileButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>+</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ChangeImgJobName</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>SaveButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StatusLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>READY</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>DeleteFcsJobButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>X</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ChangeFcsJobName</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AddFcsJobButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>EventAdmin</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>EventAdmin</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>5</CountOfDeclarationLines>
<CountOfLines>32</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
<Event>
<CommentLines>
</CommentLines>
<Name>Ready</Name>
<Declaration>Public Event Ready()</Declaration>
<Parameters>
</Parameters>
</Event>
<Event>
<CommentLines>
</CommentLines>
<Name>Busy</Name>
<Declaration>Public Event Busy()</Declaration>
<Parameters>
</Parameters>
</Event>
</Events>
<Procedures>
<Procedure>
<Name>setReady</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setReady(Optional Force As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Force</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setBusy</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setBusy(Optional Force As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Force</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>Public Sub setBusy(Task As Integer, Optional Force As Boolean)</CommentLine>
<CommentLine>    If isReady Or Force Then</CommentLine>
<CommentLine>        RaiseEvent Busy(Task)</CommentLine>
<CommentLine>        isReady = False</CommentLine>
<CommentLine>    End If</CommentLine>
<CommentLine>End Sub</CommentLine>
</CommentLines>
<Declaration>Public Sub initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>PipelineConstructor</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>MSForm</Type>
<Properties>
<Property>
<Name>ActiveControl</Name>
<Value></Value>
</Property>
<Property>
<Name>BackColor</Name>
<Value>-2147483633</Value>
</Property>
<Property>
<Name>BorderColor</Name>
<Value>0</Value>
</Property>
<Property>
<Name>BorderStyle</Name>
<Value>0</Value>
</Property>
<Property>
<Name>CanPaste</Name>
<Value>False</Value>
</Property>
<Property>
<Name>CanRedo</Name>
<Value>False</Value>
</Property>
<Property>
<Name>CanUndo</Name>
<Value>False</Value>
</Property>
<Property>
<Name>Cycle</Name>
<Value>2</Value>
</Property>
<Property>
<Name>_Font_Reserved</Name>
<Value></Value>
</Property>
<Property>
<Name>ForeColor</Name>
<Value>-2147483630</Value>
</Property>
<Property>
<Name>InsideHeight</Name>
<Value>888.75</Value>
</Property>
<Property>
<Name>InsideWidth</Name>
<Value>800.25</Value>
</Property>
<Property>
<Name>KeepScrollBarsVisible</Name>
<Value>3</Value>
</Property>
<Property>
<Name>MousePointer</Name>
<Value>0</Value>
</Property>
<Property>
<Name>PictureAlignment</Name>
<Value>2</Value>
</Property>
<Property>
<Name>Picture</Name>
<Value></Value>
</Property>
<Property>
<Name>PictureSizeMode</Name>
<Value>0</Value>
</Property>
<Property>
<Name>PictureTiling</Name>
<Value>False</Value>
</Property>
<Property>
<Name>ScrollBars</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollHeight</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollLeft</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollTop</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ScrollWidth</Name>
<Value>0</Value>
</Property>
<Property>
<Name>SpecialEffect</Name>
<Value>0</Value>
</Property>
<Property>
<Name>VerticalScrollBarSide</Name>
<Value>0</Value>
</Property>
<Property>
<Name>Zoom</Name>
<Value>100</Value>
</Property>
<Property>
<Name>DesignMode</Name>
<Value>-2</Value>
</Property>
<Property>
<Name>ShowToolbox</Name>
<Value>0</Value>
</Property>
<Property>
<Name>ShowGridDots</Name>
<Value>-2</Value>
</Property>
<Property>
<Name>SnapToGrid</Name>
<Value>-2</Value>
</Property>
<Property>
<Name>GridX</Name>
<Value>0</Value>
</Property>
<Property>
<Name>GridY</Name>
<Value>0</Value>
</Property>
<Property>
<Name>DrawBuffer</Name>
<Value>32000</Value>
</Property>
<Property>
<Name>Name</Name>
<Value>PipelineConstructor</Value>
</Property>
<Property>
<Name>Caption</Name>
<Value>MyPiC</Value>
</Property>
<Property>
<Name>Left</Name>
<Value>0</Value>
</Property>
<Property>
<Name>Top</Name>
<Value>0</Value>
</Property>
<Property>
<Name>Width</Name>
<Value>804.75</Value>
</Property>
<Property>
<Name>Height</Name>
<Value>909.75</Value>
</Property>
<Property>
<Name>Enabled</Name>
<Value>True</Value>
</Property>
<Property>
<Name>Tag</Name>
<Value></Value>
</Property>
<Property>
<Name>HelpContextID</Name>
<Value>0</Value>
</Property>
<Property>
<Name>WhatsThisButton</Name>
<Value>False</Value>
</Property>
<Property>
<Name>WhatsThisHelp</Name>
<Value>False</Value>
</Property>
<Property>
<Name>RightToLeft</Name>
<Value>False</Value>
</Property>
<Property>
<Name>StartUpPosition</Name>
<Value>1</Value>
</Property>
<Property>
<Name>ShowModal</Name>
<Value>False</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>13</CountOfDeclarationLines>
<CountOfLines>2224</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>ShowOiaKeysButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Display Keys used for Online image analysis</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub ShowOiaKeysButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UserForm_Initialize</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>137</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos; USER FORM INITIALIZATION AND DEATH</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub UserForm_Initialize()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UserForm_QueryClose</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub UserForm_QueryClose(Cancel As Integer, CloseMode As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>Cancel</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>CloseMode</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>HideShowForms</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>38</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function HideShowForms(OpenForms() As Boolean) As Boolean()</Declaration>
<Parameters>
<Parameter>
<Name>OpenForms()</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean()</ReturnType>
</Procedure>
<Procedure>
<Name>CreditButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CreditButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobSetterButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>21</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos; USER FORM CHANGE OF FOCUS (DEFAULT, TRIGGER1, etc) SAVING, LOADING OF SETTINGS</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub JobSetterButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FrameButton1_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub FrameButton1_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FrameButton2_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub FrameButton2_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FrameButton3_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub FrameButton3_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FrameButton4_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub FrameButton4_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FrameButton5_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub FrameButton5_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ToggleFrameButton</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>71</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> update form according to button that has been clicked</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub ToggleFrameButton(ButtonNumber As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>ButtonNumber</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SaveSettings_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub SaveSettings_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SaveFormSettings</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>47</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   SaveSettings of PipelineConstructor in file name FileName.</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub SaveFormSettings(FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>LoadSettings_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>36</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub LoadSettings_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>LoadFormSettings</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>96</CountOfLines>
<CommentLines>
<CommentLine>TODO use regExp to remove several white spaces</CommentLine>
</CommentLines>
<Declaration>Public Sub LoadFormSettings(FileName As String)</Declaration>
<Parameters>
<Parameter>
<Name>FileName</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TimeOutButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub TimeOutButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StopExpButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos; START AND STOP BUTTONS</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub StopExpButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StopAfterRepButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub StopAfterRepButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PauseExpButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>29</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub PauseExpButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AcquirePipelineButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>56</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Acquire current pipeline</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub AcquirePipelineButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TestAllPipelinesButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>54</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Test all pipelines</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub TestAllPipelinesButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StartExpButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub StartExpButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StartPumpExpButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub StartPumpExpButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StartSetting</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>123</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   StartSetting()</CommentLine>
<CommentLine>   Setups and controls before start of experiment</CommentLine>
<CommentLine>       Create list of positions for Grid or Multiposition</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function StartSetting() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>PositionButton1_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>20</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos; POSITIONS MANAGEMENT</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;single position&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub PositionButton1_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PositionButton2_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;multiple position&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub PositionButton2_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PositionButton3_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;grid&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub PositionButton3_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PositionButton4_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;grid based on multiple positions&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub PositionButton4_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PositionButton5_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
<CommentLine>&apos;grid based on multiple positions&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub PositionButton5_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddPositionButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AddPositionButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddPosition</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AddPosition(ID As String, pos As Vector)</Declaration>
<Parameters>
<Parameter>
<Name>ID</Name>
<Type>String</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>MoveToPositionButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub MoveToPositionButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdatePositionButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub UpdatePositionButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SwitchPosition_SpinUp</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub SwitchPosition_SpinUp()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SwitchPosition_SpinDown</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub SwitchPosition_SpinDown()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RemovePositionButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RemovePositionButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PlateType_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub PlateType_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setGridFromPositionChoice</Name>
<Scope></Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>64</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> update positions from settings in form</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Function setGridFromPositionChoice(locGrid As AGrid, optionPos As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>locGrid</Name>
<Type>AGrid</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>optionPos</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GridScanPositionFileButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>49</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> load file containing coordinates of imaging positions</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub GridScanPositionFileButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdatePositionsListFromGrid</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>27</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub UpdatePositionsListFromGrid(locGrid As AGrid)</Declaration>
<Parameters>
<Parameter>
<Name>locGrid</Name>
<Type>AGrid</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SavePositionsButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>44</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub SavePositionsButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GridScan_FirstWell_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Update GUI when reloeding the positions</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub GridScan_FirstWell_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>GridScan_WellUpperLeft_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub GridScan_WellUpperLeft_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>KeepParentButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos; PIPELINE MANAGEMENT</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos; if true parent position is not removed from grid</CommentLine>
</CommentLines>
<Declaration>Private Sub KeepParentButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>maxWait_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; max time to wait before starting subpipeline</CommentLine>
</CommentLines>
<Declaration>Private Sub maxWait_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>optPtNumber_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; max nr of points to wait before starting subpipeline</CommentLine>
</CommentLines>
<Declaration>Private Sub optPtNumber_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FillTrackingChannelList</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>41</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   fills popup menu for chosing a track for post-acquisition tracking for Job with JobName</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub FillTrackingChannelList(tmpTask As Task)</Declaration>
<Parameters>
<Parameter>
<Name>tmpTask</Name>
<Type>Task</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TrackXY_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub TrackXY_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TrackZ_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub TrackZ_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CenterOfMassChannel_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CenterOfMassChannel_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateFocusEnabled</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>34</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; update option for focusing and tracking in form according to type of job</CommentLine>
</CommentLines>
<Declaration>Private Sub UpdateFocusEnabled()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>FocusMethod_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub FocusMethod_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CurrentPipelineList_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub CurrentPipelineList_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddJobToPipelineButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub AddJobToPipelineButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DelJobPipelineButton_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>33</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub DelJobPipelineButton_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobChoiceList_DblClick</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>65</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub JobChoiceList_DblClick(ByVal Cancel As MSForms.ReturnBoolean)</Declaration>
<Parameters>
<Parameter>
<Name>Cancel</Name>
<Type>MSForms.ReturnBoolean</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobUpDown_SpinDown</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub JobUpDown_SpinDown()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>JobUpDown_SpinUp</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>24</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub JobUpDown_SpinUp()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddJobsToList</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>31</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; add imaging or FCS job to list</CommentLine>
</CommentLines>
<Declaration>Private Sub AddJobsToList(List As ListBox, Jobs)</Declaration>
<Parameters>
<Parameter>
<Name>List</Name>
<Type>ListBox</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Jobs</Name>
<Type></Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>AddSwitchesToList</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos; add a switch from one pipeline to the other</CommentLine>
</CommentLines>
<Declaration>Private Sub AddSwitchesToList(List As ListBox, indexPip As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>List</Name>
<Type>ListBox</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>indexPip</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdatePipelineList</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>80</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> Clear List and update it according to pipeline with index</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub UpdatePipelineList(List As ListBox, index As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>List</Name>
<Type>ListBox</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>saveImage_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub saveImage_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getSaveImage</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub getSaveImage()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getZOffset</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub getZOffset()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>ZOffset_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> this does not get all the changes</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub ZOffset_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionTimeUpdate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>26</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos; LOOPING REPETITIONS</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub RepetitionTimeUpdate(index As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionMinSecUpdate</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionMinSecUpdate(Min As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>Min</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionTime_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionTime_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionInterval_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionInterval_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionMin_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionMin_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionNumber_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionNumber_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionNumber_Change</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionNumber_Change()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>RepetitionSec_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub RepetitionSec_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>UpdateRepetitionSettings</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>25</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> update form from pipeline index</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub UpdateRepetitionSettings(index As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>StartOption_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;</CommentLine>
<CommentLine> time point where to acquire an image</CommentLine>
<CommentLine>&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub StartOption_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>EndOption_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub EndOption_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PeriodOption_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub PeriodOption_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PeriodButton_SpinUp</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub PeriodButton_SpinUp()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>PeriodButton_SpinDown</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub PeriodButton_SpinDown()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setPeriod</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>16</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub setPeriod()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getPeriod</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>23</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub getPeriod()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>CommandButtonNewDataBase_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>42</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos; FILE OUTPUT</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine> Set output folder</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub CommandButtonNewDataBase_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>DatabaseTextbox_KeyDown</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Only update the outputfolder when enter is pressed. This avoids creating a folder at every keystroke</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub DatabaseTextbox_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>KeyCode</Name>
<Type>MSForms.ReturnInteger</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>TextBoxFileName_KeyDown</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub TextBoxFileName_KeyDown(ByVal KeyCode As MSForms.ReturnInteger, ByVal Shift As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>KeyCode</Name>
<Type>MSForms.ReturnInteger</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Shift</Name>
<Type>Integer</Type>
<IsByVal>True</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetDatabase</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>55</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   Set global variables for files and check if we can create Outputfolder</CommentLine>
<CommentLine>       [GlobalDataBaseName] Out/Global - The name of Outputfolder</CommentLine>
<CommentLine>       [LogFileNameBase]    Out/Global - The name of the LogfileName</CommentLine>
<CommentLine>       Log]                Out/Global - If yes results are logged</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Private Sub SetDatabase()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>SetFileName</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub SetFileName()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>fileFormatczi_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;set global variables for file format</CommentLine>
</CommentLines>
<Declaration>Private Sub fileFormatczi_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>fileFormatlsm_Click</Name>
<Scope>Private</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Private Sub fileFormatlsm_Click()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
<Controls>
<Control>
<Name>MicStatus</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>READY</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FramePipeline</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>CurrentPipelineList</Name>
<ProgId>MSForms.ListBox</ProgId>
<ClassName>ListBox</ClassName>
</Control>
<Control>
<Name>FrameButton1</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Default</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameButton2</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Trigger1</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameButton3</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Trigger2</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label1</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Nr.</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label2</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Name</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>RepetitionInterval</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Interval (not delay)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>RepetitionMin</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>min</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>RepetitionSec</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>sec</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>RepetitionTime</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>RepetitionTimeLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Delay</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>RepetitionNumber</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>RepetitionNumberLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Number of repetitions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>JobChoiceList</Name>
<ProgId>MSForms.ListBox</ProgId>
<ClassName>ListBox</ClassName>
</Control>
<Control>
<Name>AddJobToPipelineButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>DelJobPipelineButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>-</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>JobChoiceLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Select by double click</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label3</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>JobName</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label4</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Type</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>JobChoiceFrame</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PeriodOption</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>every </Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label5</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Execute </Value>
</Property>
</Properties>
</Control>
<Control>
<Name>EndOption</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>at the end </Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Period</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>Label6</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>repetitions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StartOption</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>at the start </Value>
</Property>
</Properties>
</Control>
<Control>
<Name>CenterOfMassChannel</Name>
<ProgId>MSForms.ComboBox</ProgId>
<ClassName>ComboBox</ClassName>
</Control>
<Control>
<Name>Trigger1LabelChannel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Channel</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>TrackXY</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track XY</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>TrackZ</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Track Z</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FocusMethod</Name>
<ProgId>MSForms.ComboBox</ProgId>
<ClassName>ComboBox</ClassName>
</Control>
<Control>
<Name>Trigger1LabelMethod</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Method</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label7</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Process Image/Tracking</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FramePipelineTask</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Pipeline Default tasks</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FramePipelineRepetitions</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Pipeline repetitions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StartExpButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>AcquirePipelineButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>SaveImage</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Save</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PeriodButton</Name>
<ProgId>MSForms.SpinButton</ProgId>
<ClassName>SpinButton</ClassName>
</Control>
<Control>
<Name>JobUpDown</Name>
<ProgId>MSForms.SpinButton</ProgId>
<ClassName>SpinButton</ClassName>
</Control>
<Control>
<Name>TrackingFrame</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ZOffset</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>Label8</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Z-Offset (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label9</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Type</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameButton4</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Default Positions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dColumnsub</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_dColumnLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>dCol (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dRow</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_nRowLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Row (Y)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_nRow</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_dColumn</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_nColumn</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_nColumnLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Column (X)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dRowsub</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_dColumnsubLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>dCol (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_nRowsub</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_nColumnsub</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_nColumnsubLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Column (X)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_nRowsubLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Row (Y)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dRowLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>dRow (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_dRowsubLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>dRow (um)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_refColumn</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_refRow</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>GridScan_refRowLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Ref. Row</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_refColumnLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Ref. Column</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FramePositions</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PositionsList</Name>
<ProgId>MSForms.ListBox</ProgId>
<ClassName>ListBox</ClassName>
</Control>
<Control>
<Name>AddPositionButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Mark</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>RemovePositionButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Remove</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PlateType</Name>
<ProgId>MSForms.ComboBox</ProgId>
<ClassName>ComboBox</ClassName>
</Control>
<Control>
<Name>WellID</Name>
<ProgId>MSForms.ComboBox</ProgId>
<ClassName>ComboBox</ClassName>
</Control>
<Control>
<Name>SwitchPosition</Name>
<ProgId>MSForms.SpinButton</ProgId>
<ClassName>SpinButton</ClassName>
</Control>
<Control>
<Name>MoveToPositionButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Move To</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label10</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>X</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label11</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>ID</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label12</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Nr.</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>UpdatePositionButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Update</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label13</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Y</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label14</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Z</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PositionButton1</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Single</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PositionButton2</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Multiple </Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PositionButton3</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Grid </Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PositionButton4</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Multiple + subgrid</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label15</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Label15</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameButton6</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>TCP/IP</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label16</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>ID</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FramePositionsControl</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Marked positions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameGridControl</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Wells/Positions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label17</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Plate</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameSubGridControl</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Subpositions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>TimeOutButton</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>TimeOut</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>fileFormatlsm</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>lsm</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>fileFormatczi</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>czi</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ProgressLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Ready</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>keepParentButton</Name>
<ProgId>MSForms.CheckBox</ProgId>
<ClassName>CheckBox</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Keep parent position</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>optPtNumberLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>max. # Pts</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>maxWaitLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>max. waiting  (sec)</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FramePipelineTrigger</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Start/End conditions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>maxWait</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>optPtNumber</Name>
<ProgId>WLCONTROLSLib.BSlider</ProgId>
<ClassName>BSlider</ClassName>
</Control>
<Control>
<Name>JobSetterButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>JobSetter</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameSaving</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>File Output</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>TextBoxFileName</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>LabelFileName</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Base File Name</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label21</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Folder</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>DatabaseTextbox</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>CommandButtonNewDataBase</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>...</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>Label22</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Format</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameButton5</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Saving</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StopExpButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameGridLoad</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Load Files</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanPositionFileLabel</Name>
<ProgId>MSForms.Label</ProgId>
<ClassName>Label</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>PosGrid</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanPositionFileButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>...</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScanPositionFile</Name>
<ProgId>MSForms.TextBox</ProgId>
<ClassName>TextBox</ClassName>
</Control>
<Control>
<Name>PositionButton5</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Load positions</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameTaskOptions</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>SavePositionsButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>SaveSettings</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>LoadSettings</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>PauseExpButton</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StartPumpExpButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>CreditButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Credit</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>StopAfterRepButton</Name>
<ProgId>MSForms.ToggleButton</ProgId>
<ClassName>ToggleButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>TestAllPipelinesButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>T</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>FrameGridOrder</Name>
<ProgId>MSForms.Frame</ProgId>
<ClassName>Frame</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Order</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_FirstWell</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Well then  Subpos</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_FirstSubPos</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Subpos then Well</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_WellUpperLeft</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>OptionButton2</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>OptionButton2</Value>
</Property>
</Properties>
</Control>
<Control>
<Name>GridScan_WellCenter</Name>
<ProgId>MSForms.OptionButton</ProgId>
<ClassName>OptionButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value></Value>
</Property>
</Properties>
</Control>
<Control>
<Name>ShowOiaKeysButton</Name>
<ProgId>MSForms.CommandButton</ProgId>
<ClassName>CommandButton</ClassName>
<Properties>
<Property>
<Name>Caption</Name>
<Value>Show OIA Keys</Value>
</Property>
</Properties>
</Control>
</Controls>
</File>
<File>
<Name>APipeline</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>ClassModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>APipeline</Value>
</Property>
<Property>
<Name>Instancing</Name>
<Value>1</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>6</CountOfDeclarationLines>
<CountOfLines>167</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>keepParent</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get keepParent() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>keepParent</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let keepParent(value As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>optPtNumber</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get optPtNumber() As Integer</Declaration>
<Parameters>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>optPtNumber</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let optPtNumber(value As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>maxWait</Name>
<Scope>Public</Scope>
<Type>PropertyGet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Get maxWait() As Double</Declaration>
<Parameters>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>maxWait</Name>
<Scope>Public</Scope>
<Type>PropertyLet</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Property Let maxWait(value As Double)</Declaration>
<Parameters>
<Parameter>
<Name>value</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>addTask</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>12</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub addTask(TaskIn As Task)</Declaration>
<Parameters>
<Parameter>
<Name>TaskIn</Name>
<Type>Task</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>swapTask</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>9</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub swapTask(i As Integer, j As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>i</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>j</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>updateTask</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>6</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub updateTask(index As Integer, TaskIn As Task)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>TaskIn</Name>
<Type>Task</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>delAllTasks</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub delAllTasks()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>delTask</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>15</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub delTask(index As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>count</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>11</CountOfLines>
<CommentLines>
<CommentLine>&apos;</CommentLine>
<CommentLine> nr tasks</CommentLine>
<CommentLine>&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function count() As Integer</Declaration>
<Parameters>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>getTask</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>7</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getTask(index As Integer) As Task</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Task</ReturnType>
</Procedure>
<Procedure>
<Name>isEmpty</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>13</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function isEmpty() As Boolean</Declaration>
<Parameters>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>getTrackXY</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getTrackXY(index As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setTrackXY</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setTrackXY(index As Integer, Track As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Track</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getTrackZ</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getTrackZ(index As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setTrackZ</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setTrackZ(index As Integer, Track As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Track</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getPeriod</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getPeriod(index As Integer) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>setPeriod</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setPeriod(index As Integer, Period As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Period</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getSaveImage</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getSaveImage(index As Integer) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>setSaveImage</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setSaveImage(index As Integer, save As Boolean)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>save</Name>
<Type>Boolean</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getAnalyse</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getAnalyse(index As Integer) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>setAnalyse</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setAnalyse(index As Integer, Analyse As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Analyse</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getTrackChannel</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>5</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getTrackChannel(index As Integer) As Integer</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Integer</ReturnType>
</Procedure>
<Procedure>
<Name>setTrackChannel</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setTrackChannel(index As Integer, channel As Integer)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>channel</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>getZOffset</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Function getZOffset(index As Integer) As Double</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Double</ReturnType>
</Procedure>
<Procedure>
<Name>setZOffset</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>4</CountOfLines>
<CommentLines>
</CommentLines>
<Declaration>Public Sub setZOffset(index As Integer, Offset As Double)</Declaration>
<Parameters>
<Parameter>
<Name>index</Name>
<Type>Integer</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>Offset</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
</CommentLines>
</CodeModule>
</File>
<File>
<Name>FCSFunctions</Name>
<FileName></FileName>
<PathFileName></PathFileName>
<Type>StdModule</Type>
<Properties>
<Property>
<Name>Name</Name>
<Value>FCSFunctions</Value>
</Property>
</Properties>
<CodeModule>
<CountOfDeclarationLines>9</CountOfDeclarationLines>
<CountOfLines>75</CountOfLines>
<Interfaces>
</Interfaces>
<Events>
</Events>
<Procedures>
<Procedure>
<Name>getFcsPosition</Name>
<Scope>Public</Scope>
<Type>Subroutine</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>18</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   GetFcsPosition(PosX As Double, PosY As Double, PosZ As Double)</CommentLine>
<CommentLine>   reads position of small crosshair</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Sub getFcsPosition(PosX As Double, PosY As Double, PosZ As Double, Optional pos As Long = -1)</Declaration>
<Parameters>
<Parameter>
<Name>PosX</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>PosY</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>PosZ</Name>
<Type>Double</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
<Parameter>
<Name>pos</Name>
<Type>Long</Type>
<IsByVal>False</IsByVal>
<IsOptional>True</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue>-1</DefaultValue>
</Parameter>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
<Procedure>
<Name>setFcsPositions</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>22</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
<CommentLine>   SetFcsPosition(PosX As Double, PosY As Double, PosZ As Double, Pos As Long)</CommentLine>
<CommentLine>   Create a new position if Pos &gt; FcsPositions.PositionListSize</CommentLine>
<CommentLine>   then all positions inbetween are set to 0</CommentLine>
<CommentLine>&apos;&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function setFcsPositions(Positions() As Vector) As Boolean</Declaration>
<Parameters>
<Parameter>
<Name>Positions()</Name>
<Type>Vector</Type>
<IsByVal>False</IsByVal>
<IsOptional>False</IsOptional>
<IsParamArray>False</IsParamArray>
<DefaultValue></DefaultValue>
</Parameter>
</Parameters>
<ReturnType>Boolean</ReturnType>
</Procedure>
<Procedure>
<Name>GetFcsPositionListLength</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>10</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   GetFcsListPositionLength()</CommentLine>
<CommentLine>   Maximal number of positions</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function GetFcsPositionListLength() As Long</Declaration>
<Parameters>
</Parameters>
<ReturnType>Long</ReturnType>
</Procedure>
<Procedure>
<Name>ClearFcsPositionList</Name>
<Scope>Public</Scope>
<Type>Function</Type>
<CountOfDeclarationLines>1</CountOfDeclarationLines>
<CountOfLines>14</CountOfLines>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine>   ClearFcsPositionList()</CommentLine>
<CommentLine>   Remove all FCSpositions stored</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
<Declaration>Public Function ClearFcsPositionList()</Declaration>
<Parameters>
</Parameters>
<ReturnType></ReturnType>
</Procedure>
</Procedures>
<CommentLines>
<CommentLine>&apos;&apos;&apos;</CommentLine>
<CommentLine> Module contains Functions used during Fcs</CommentLine>
<CommentLine>&apos;&apos;&apos;</CommentLine>
</CommentLines>
</CodeModule>
</File>
</Files>
</Project>
